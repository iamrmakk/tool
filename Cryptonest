
<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
    <!-- PASTE YOUR SVG PATH HERE -->
</svg>

header: '<svg width="20" height="20" viewBox="0 0 24 24" fill="white">
    <!-- PASTE YOUR SVG PATH HERE -->
</svg>'

settings: '<svg width="40" height="40" viewBox="0 0 24 24" fill="white">
    <!-- PASTE YOUR SVG PATH HERE -->
</svg>'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BitcoinNest</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: url('https://img.freepik.com/free-ai-image/cyberpunk-bitcoin-illustration_236291678.htm') center/cover no-repeat fixed;
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
            min-height: 100vh;
            background: rgba(0, 0, 0, 0.1);
            position: relative;
        }

        .header {
            padding: 20px;
            padding-top: 25px;
            text-align: center;
            background: rgba(0, 0, 0, 0.2);
            position: relative;
            min-height: 140px;
        }

        .user-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            margin-top: 10px;
            padding: 0 10px;
            position: relative;
            z-index: 50;
        }

        .menu-dots {
            position: absolute;
            top: 15px;
            right: 15px;
            cursor: pointer;
            padding: 12px;
            border-radius: 15px;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.05));
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 100;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .menu-dots:hover {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.15));
            transform: scale(1.05) translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .menu-dots:active {
            transform: scale(0.95);
        }

        .dots {
            width: 5px;
            height: 5px;
            background: linear-gradient(45deg, #ffd700, #ffed4e);
            border-radius: 50%;
            margin: 3px 0;
            transition: all 0.3s;
            box-shadow: 0 2px 4px rgba(255, 215, 0, 0.3);
        }

        .menu-dots:hover .dots {
            background: linear-gradient(45deg, #fff, #ffd700);
            transform: scale(1.2);
            box-shadow: 0 3px 8px rgba(255, 215, 0, 0.5);
        }

        .dropdown-menu {
            position: absolute;
            top: 55px;
            right: 15px;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.95), rgba(30, 30, 30, 0.95));
            border-radius: 20px;
            padding: 20px 0;
            min-width: 220px;
            transform: translateY(-20px) scale(0.95);
            opacity: 0;
            visibility: hidden;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 1000;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.15);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(255, 255, 255, 0.05);
        }

        .dropdown-menu.active {
            transform: translateY(0) scale(1);
            opacity: 1;
            visibility: visible;
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px 25px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            color: white;
            text-decoration: none;
            position: relative;
            margin: 0 10px;
            border-radius: 12px;
        }

        .dropdown-item:hover {
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.05));
            transform: translateX(5px);
            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.1);
        }

        .dropdown-item:active {
            transform: translateX(3px) scale(0.98);
        }

        .dropdown-icon {
            font-size: 20px;
            width: 24px;
            text-align: center;
            filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
            transition: all 0.3s;
        }

        .dropdown-item:hover .dropdown-icon {
            transform: scale(1.1);
            filter: drop-shadow(0 4px 8px rgba(255, 215, 0, 0.4));
        }

        .dropdown-text {
            font-size: 15px;
            font-weight: 600;
            letter-spacing: 0.3px;
        }

        .crypto-chart {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .chart-container {
            height: 200px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 15px 0;
            position: relative;
            overflow: hidden;
        }

        .chart-line {
            position: absolute;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, #4CAF50, #8BC34A, #FFC107, #FF5722);
            animation: chartMove 3s ease-in-out infinite;
        }

        @keyframes chartMove {
            0%, 100% { transform: translateY(0) scaleY(1); }
            25% { transform: translateY(-20px) scaleY(1.5); }
            50% { transform: translateY(10px) scaleY(0.8); }
            75% { transform: translateY(-10px) scaleY(1.2); }
        }

        .crypto-prices {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .price-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 8px;
            text-align: center;
        }

        .price-symbol {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .price-value {
            font-size: 14px;
            color: #4CAF50;
        }

        .news-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .news-item {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .news-item:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .news-title {
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 8px;
            color: #ffd700;
        }

        .news-summary {
            font-size: 14px;
            opacity: 0.9;
            line-height: 1.4;
            margin-bottom: 8px;
        }

        .news-time {
            font-size: 12px;
            opacity: 0.7;
        }

        .rank-details {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .rank-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .rank-number {
            font-size: 48px;
            font-weight: bold;
            color: #ffd700;
        }

        .rank-benefits {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
        }

        .benefit-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .username {
            font-size: 18px;
            font-weight: bold;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
            padding: 0 10px;
        }

        .stat-item {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 4px;
            border-radius: 10px;
            backdrop-filter: blur(5px);
        }

        .stat-value {
            font-size: 16px;
            font-weight: bold;
            color: #ffd700;
            display: block;
            margin-bottom: 2px;
        }

        .stat-label {
            font-size: 10px;
            opacity: 0.9;
            color: white;
        }

        .main-game {
            padding: 30px 20px;
            text-align: center;
        }

        .bitcoin-container {
            position: relative;
            margin: 30px 0;
        }

        .bitcoin-tap {
            width: 200px;
            height: 200px;
            background: linear-gradient(45deg, #f7931e, #ffb347);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            cursor: pointer;
            transition: transform 0.1s, background 0.5s, opacity 0.3s;
            box-shadow: 0 10px 30px rgba(247, 147, 30, 0.3);
            border: 5px solid #fff;
            position: relative;
            overflow: hidden;
        }

        .bitcoin-tap.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }

        .bitcoin-tap.rank-progress {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
        }

        .bitcoin-dots {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            pointer-events: none;
        }

        .rank-dot {
            position: absolute;
            width: 8px;
            height: 8px;
            background: #4CAF50;
            border-radius: 50%;
            opacity: 0;
            transition: opacity 0.5s;
        }

        .rank-dot.active {
            opacity: 1;
        }

        .bitcoin-tap:active {
            transform: scale(0.95);
        }

        .bitcoin-symbol {
            font-size: 80px;
            font-weight: bold;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .tap-effect {
            position: absolute;
            font-size: 24px;
            font-weight: bold;
            color: #ffd700;
            pointer-events: none;
            animation: floatUp 1s ease-out forwards;
        }

        @keyframes floatUp {
            0% {
                opacity: 1;
                transform: translateY(0);
            }
            100% {
                opacity: 0;
                transform: translateY(-50px);
            }
        }

        .energy-bar {
            margin: 20px 0;
        }

        .energy-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .energy-progress {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
        }

        .energy-fill {
            height: 100%;
            transition: width 0.3s, background 0.3s;
            border-radius: 10px;
        }

        .energy-fill.low {
            background: linear-gradient(90deg, #f44336, #ff5722);
        }

        .energy-fill.medium {
            background: linear-gradient(90deg, #ff9800, #ffc107);
        }

        .energy-fill.high {
            background: linear-gradient(90deg, #4CAF50, #8BC34A);
        }

        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100%;
            max-width: 400px;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: space-around;
            padding: 15px 0;
        }

        .nav-item {
            text-align: center;
            cursor: pointer;
            padding: 5px;
            border-radius: 10px;
            transition: background 0.3s;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .nav-icon {
            font-size: 24px;
            margin-bottom: 5px;
        }

        .nav-label {
            font-size: 12px;
        }

        .screen {
            display: none;
            padding: 20px;
            padding-bottom: 100px;
        }

        .screen.active {
            display: block;
        }

        .wallet-section, .settings-section, .ads-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .section-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #ffd700;
        }

        .wallet-input {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            margin-bottom: 10px;
        }

        .btn {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-success {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(45deg, #ff9800, #ffc107);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .referral-link {
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 8px;
            word-break: break-all;
            margin: 10px 0;
        }

        .rank-display {
            text-align: center;
            margin: 20px 0;
        }

        .rank-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.15), rgba(255, 237, 78, 0.08));
            backdrop-filter: blur(10px);
            border: 1.5px solid rgba(255, 215, 0, 0.4);
            border-radius: 20px;
            padding: 6px 12px;
            font-weight: 700;
            font-size: 13px;
            color: #ffd700;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            box-shadow: 0 2px 8px rgba(255, 215, 0, 0.2);
            position: relative;
            z-index: 60;
            transition: all 0.3s ease;
        }

        .rank-badge:before {
            content: '👑';
            font-size: 14px;
            filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
        }

        .rank-badge:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(255, 215, 0, 0.3);
            border-color: rgba(255, 215, 0, 0.6);
        }

        .progress-bar {
            width: 100%;
            height: 15px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 5px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ffd700, #ffed4e);
            transition: width 0.5s;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            max-width: 300px;
            width: 90%;
        }

        .close-modal {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 24px;
            cursor: pointer;
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            z-index: 1001;
            display: none;
        }

        .profile-picture {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
            border: 3px solid #ffd700;
            overflow: hidden;
        }

        .profile-picture img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .header-profile {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            border: 2px solid #ffd700;
            overflow: hidden;
        }

        .header-profile img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-skin-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            padding: 10px;
            cursor: pointer;
            transition: all 0.3s;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 70px;
        }

        .avatar-skin-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 215, 0, 0.5);
            transform: translateY(-2px);
        }

        .avatar-skin-btn.selected {
            background: rgba(255, 215, 0, 0.2);
            border-color: #ffd700;
            box-shadow: 0 0 15px rgba(255, 215, 0, 0.3);
        }

        .leaderboard-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 12px;
            margin-bottom: 8px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border-left: 3px solid transparent;
            transition: all 0.3s;
        }

        .leaderboard-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(3px);
        }

        .leaderboard-item.top-1 {
            border-left-color: #ffd700;
            background: rgba(255, 215, 0, 0.1);
        }

        .leaderboard-item.top-2 {
            border-left-color: #c0c0c0;
            background: rgba(192, 192, 192, 0.1);
        }

        .leaderboard-item.top-3 {
            border-left-color: #cd7f32;
            background: rgba(205, 127, 50, 0.1);
        }

        .leaderboard-rank {
            font-size: 14px;
            font-weight: bold;
            min-width: 25px;
            text-align: center;
        }

        .leaderboard-player {
            display: flex;
            align-items: center;
            gap: 8px;
            flex: 1;
            margin-left: 10px;
        }

        .leaderboard-avatar {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .leaderboard-name {
            font-size: 13px;
            font-weight: 600;
        }

        .leaderboard-coins {
            font-size: 12px;
            color: #ffd700;
            font-weight: bold;
        }

        /* Live Crypto Chart Styles */
        .chart-tabs {
            display: flex;
            gap: 5px;
            margin-bottom: 20px;
            overflow-x: auto;
            padding-bottom: 5px;
        }

        .chart-tab {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 8px 12px;
            color: white;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 12px;
            font-weight: bold;
            white-space: nowrap;
            min-width: 60px;
        }

        .chart-tab:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }

        .chart-tab.active {
            background: linear-gradient(135deg, #ffd700, #ffed4e);
            color: #000;
            border-color: #ffd700;
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.3);
        }

        .main-chart-container {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .chart-title {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .chart-symbol {
            font-size: 12px;
            opacity: 0.7;
            font-weight: normal;
        }

        .chart-price-info {
            text-align: right;
        }

        .current-price {
            font-size: 20px;
            font-weight: bold;
            color: #ffd700;
        }

        .price-change {
            font-size: 14px;
            font-weight: bold;
        }

        .price-change.positive {
            color: #4CAF50;
        }

        .price-change.negative {
            color: #f44336;
        }

        .chart-canvas-container {
            position: relative;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            margin-bottom: 15px;
            overflow: hidden;
        }

        #priceChart {
            width: 100%;
            height: 200px;
            display: block;
        }

        .chart-loading {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            font-size: 14px;
        }

        .chart-loading.hidden {
            display: none;
        }

        .loading-spinner {
            width: 30px;
            height: 30px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid #ffd700;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .timeframe-selector {
            display: flex;
            gap: 5px;
            justify-content: center;
        }

        .timeframe-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 6px 12px;
            color: white;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 11px;
            font-weight: bold;
        }

        .timeframe-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .timeframe-btn.active {
            background: linear-gradient(135deg, #4CAF50, #8BC34A);
            border-color: #4CAF50;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }

        .live-prices-grid {
            margin-top: 20px;
        }

        .crypto-prices {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }

        .price-item {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 12px;
            transition: all 0.3s;
            cursor: pointer;
        }

        .price-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .price-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .price-symbol {
            font-size: 14px;
            font-weight: bold;
        }

        .price-24h {
            font-size: 11px;
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 4px;
        }

        .price-24h.positive {
            background: rgba(76, 175, 80, 0.2);
            color: #4CAF50;
        }

        .price-24h.negative {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
        }

        .price-value {
            font-size: 16px;
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 4px;
        }

        .price-volume {
            font-size: 10px;
            opacity: 0.7;
        }

        .data-source {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            padding: 10px;
            margin-top: 15px;
            font-size: 12px;
            opacity: 0.8;
        }

        .live-indicator {
            width: 8px;
            height: 8px;
            background: #4CAF50;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
            }
        }

        /* Panda Trade Styles */
        .panda-trade-container {
            padding: 20px;
            padding-bottom: 100px;
        }

        .trading-chart-section {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .trading-pair {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .pair-symbol {
            font-size: 18px;
            font-weight: bold;
            color: #ffd700;
        }

        .live-price-display {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        #tradingPrice {
            font-size: 20px;
            font-weight: bold;
            color: white;
        }

        .panda-indicator {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .panda-avatar {
            font-size: 32px;
            transition: all 0.5s ease;
            filter: drop-shadow(0 2px 8px rgba(255, 215, 0, 0.3));
        }

        .panda-avatar.bullish {
            transform: translateY(-5px) scale(1.1);
            filter: drop-shadow(0 4px 12px rgba(76, 175, 80, 0.5));
        }

        .panda-avatar.bearish {
            transform: translateY(5px) scale(0.9);
            filter: drop-shadow(0 4px 12px rgba(244, 67, 54, 0.5));
        }

        .panda-status {
            font-size: 12px;
            font-weight: bold;
            padding: 4px 8px;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.1);
            transition: all 0.3s;
        }

        .panda-status.bullish {
            background: rgba(76, 175, 80, 0.2);
            color: #4CAF50;
        }

        .panda-status.bearish {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
        }

        .candlestick-container {
            position: relative;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            margin-bottom: 15px;
            overflow: hidden;
            height: 250px;
        }

        #candlestickChart {
            width: 100%;
            height: 100%;
            display: block;
        }

        .chart-controls {
            display: flex;
            justify-content: center;
        }

        .timeframe-controls {
            display: flex;
            gap: 5px;
        }

        .avatar-trading-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .trading-balance {
            display: flex;
            justify-content: space-between;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .balance-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .balance-item span:first-child {
            font-size: 12px;
            opacity: 0.8;
        }

        .balance-item span:last-child {
            font-size: 18px;
            font-weight: bold;
            color: #ffd700;
        }

        .trading-skins-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .trading-skin-card {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            border: 2px solid transparent;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .trading-skin-card:hover {
            border-color: rgba(255, 215, 0, 0.5);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .trading-skin-card.owned {
            border-color: #4CAF50;
            background: rgba(76, 175, 80, 0.1);
        }

        .skin-preview {
            font-size: 40px;
            margin-bottom: 10px;
            filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.3));
        }

        .skin-info {
            margin-bottom: 15px;
        }

        .skin-name {
            font-size: 14px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .skin-price {
            font-size: 12px;
            color: #ffd700;
            margin-bottom: 8px;
        }

        .skin-rarity {
            font-size: 10px;
            font-weight: bold;
            padding: 2px 8px;
            border-radius: 10px;
            display: inline-block;
        }

        .skin-rarity.rare {
            background: rgba(54, 162, 235, 0.2);
            color: #36a2eb;
        }

        .skin-rarity.epic {
            background: rgba(153, 102, 255, 0.2);
            color: #9966ff;
        }

        .skin-rarity.legendary {
            background: rgba(255, 159, 64, 0.2);
            color: #ff9f40;
        }

        .skin-rarity.mythic {
            background: rgba(255, 99, 132, 0.2);
            color: #ff6384;
        }

        .skin-rarity.divine {
            background: linear-gradient(45deg, rgba(255, 215, 0, 0.2), rgba(255, 99, 132, 0.2));
            color: #ffd700;
        }

        .trade-btn {
            width: 100%;
            padding: 8px;
            border: none;
            border-radius: 8px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 12px;
        }

        .trade-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .trade-btn:disabled {
            background: rgba(255, 255, 255, 0.2);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .trade-btn.owned {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
        }

        .trading-stats-section {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .stat-card {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #ffd700;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 12px;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Game Screen -->
        <div id="gameScreen" class="screen active">
            <div class="header">
                <!-- Three Dots Menu -->
                <div class="menu-dots" onclick="toggleDropdown()">
                    <div class="dots"></div>
                    <div class="dots"></div>
                    <div class="dots"></div>
                </div>
                
                <!-- Dropdown Menu -->
                <div class="dropdown-menu" id="dropdownMenu">
                    <div class="dropdown-item" onclick="showDropdownScreen('rankScreen')">
                        <div class="dropdown-icon">🏆</div>
                        <div class="dropdown-text">Rank Details</div>
                    </div>
                    <div class="dropdown-item" onclick="showDropdownScreen('chartScreen')">
                        <div class="dropdown-icon">📈</div>
                        <div class="dropdown-text">Live Crypto Chart</div>
                    </div>
                    <div class="dropdown-item" onclick="showDropdownScreen('pandaTradeScreen')">
                        <div class="dropdown-icon">🐼</div>
                        <div class="dropdown-text">Panda Trade</div>
                    </div>
                    <div class="dropdown-item" onclick="showDropdownScreen('newsScreen')">
                        <div class="dropdown-icon">📰</div>
                        <div class="dropdown-text">Crypto News</div>
                    </div>
                    <div class="dropdown-item" onclick="showScreen('settingsScreen'); toggleDropdown();">
                        <div class="dropdown-icon">⚙️</div>
                        <div class="dropdown-text">Settings</div>
                    </div>
                </div>
                
                <div class="user-info">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <div class="header-profile" id="headerProfile">
                            <span style="font-size: 20px;">👤</span>
                        </div>
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <div class="username" id="displayUsername">TapMaster</div>
                            <div class="rank-badge" id="rankDisplay">Rank 1</div>
                        </div>
                    </div>
                </div>
                <div class="stats">
                    <div class="stat-item">
                        <div class="stat-value" id="coinCount">0</div>
                        <div class="stat-label">Coins</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="diamondCount">0</div>
                        <div class="stat-label">Diamonds</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="pandaCoinCount">0</div>
                        <div class="stat-label">🐼 Coins</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="levelDisplay">1</div>
                        <div class="stat-label">Level</div>
                    </div>
                </div>
            </div>

            <div class="main-game">
                <div class="bitcoin-container">
                    <div class="bitcoin-tap" id="bitcoinTap">
                        <div class="bitcoin-dots" id="bitcoinDots"></div>
                        <div class="bitcoin-symbol">₿</div>
                    </div>
                </div>

                <div class="energy-bar">
                    <div class="energy-label">
                        <span>Energy</span>
                        <span id="energyText">100/100</span>
                    </div>
                    <div class="energy-progress">
                        <div class="energy-fill" id="energyFill" style="width: 100%"></div>
                    </div>
                    <div style="font-size: 12px; margin-top: 5px; opacity: 0.8;">
                        Refills in: <span id="refillTimer">5:00</span>
                    </div>
                </div>

                <div class="rank-display">
                    <div class="progress-bar">
                        <div class="progress-fill" id="rankProgress" style="width: 0%"></div>
                    </div>
                    <div style="font-size: 12px;">
                        <span id="currentCoins">0</span> / <span id="nextRankCoins">100</span> coins to next rank
                    </div>
                </div>
            </div>
        </div>

        <!-- Wallet Screen -->
        <div id="walletScreen" class="screen">
            <div class="wallet-section">
                <div class="section-title">💰 Crypto Wallet</div>
                <input type="text" class="wallet-input" id="walletAddress" placeholder="Enter your crypto wallet address">
                <button class="btn btn-primary" onclick="connectWallet()">Connect Wallet (1 USDT)</button>
                <div style="font-size: 12px; margin-top: 10px; opacity: 0.8;">
                    Connection fee: 1 USDT • Secure & encrypted
                </div>
            </div>

            <div class="wallet-section">
                <div class="section-title">💎 Withdraw</div>
                <div style="margin-bottom: 15px;">
                    Available: <span id="withdrawBalance">0</span> diamonds
                </div>
                <input type="number" class="wallet-input" id="withdrawAmount" placeholder="Amount to withdraw">
                <button class="btn btn-warning" onclick="withdraw()" id="withdrawBtn" disabled>
                    🔒 Withdraw (Team Controlled)
                </button>
                <div style="font-size: 12px; margin-top: 10px; opacity: 0.8;">
                    Withdrawals are distributed by our team when decided
                </div>
            </div>


        </div>

        <!-- Ads Screen -->
        <div id="adsScreen" class="screen">
            <div class="ads-section">
                <div class="section-title">📺 Watch Ads</div>
                <div style="text-align: center; margin: 30px 0;">
                    <div style="font-size: 48px; margin-bottom: 15px;">💎🐼</div>
                    <div style="font-size: 18px; margin-bottom: 10px;">Earn 1 Diamond + 5 Panda Coins</div>
                    <div style="font-size: 14px; opacity: 0.8; margin-bottom: 20px;">Watch a short video ad</div>
                    <button class="btn btn-warning" onclick="watchAd()" id="adBtn">
                        ▶️ Watch Ad
                    </button>
                </div>
                <div style="font-size: 12px; text-align: center; opacity: 0.8;">
                    Next ad available in: <span id="adTimer">Ready</span>
                </div>
            </div>

            <div class="ads-section">
                <div class="section-title">🎯 Ad Statistics</div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                    <span>Ads Watched Today:</span>
                    <span id="adsWatchedToday">0</span>
                </div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                    <span>Total Ads Watched:</span>
                    <span id="totalAdsWatched">0</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                    <span>Diamonds Earned:</span>
                    <span id="diamondsFromAds">0</span>
                </div>
            </div>
        </div>

        <!-- PandaCode Screen -->
        <div id="pandaScreen" class="screen">
            <div class="settings-section">
                <div class="section-title">🐼 PandaCode Game</div>
                <div style="text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 60px; margin-bottom: 10px;">🐼</div>
                    <div style="font-size: 18px; margin-bottom: 15px;">Find Hidden Codes in Videos!</div>
                    <div style="font-size: 14px; opacity: 0.8; margin-bottom: 20px;">
                        Watch our daily YouTube videos and find the secret codes to earn rewards!
                    </div>
                </div>
                
                <div style="background: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 10px; margin-bottom: 15px;">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">📺 Today's Video Challenge</div>
                    <div style="font-size: 14px; margin-bottom: 10px;">
                        Video Title: "Bitcoin Trading Secrets Revealed"
                    </div>
                    <button class="btn btn-primary" onclick="watchYouTubeVideo()" style="margin-bottom: 10px;">
                        ▶️ Watch on YouTube
                    </button>
                    <div style="font-size: 12px; opacity: 0.8;">
                        Find the 6-digit code hidden in the video!
                    </div>
                </div>

                <div style="margin-bottom: 20px;">
                    <input type="text" class="wallet-input" id="codeInput" placeholder="Enter the 6-digit code" maxlength="6">
                    <button class="btn btn-success" onclick="submitCode()">🔍 Submit Code</button>
                </div>

                <div style="background: rgba(255, 255, 255, 0.1); padding: 15px; border-radius: 10px;">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 10px;">🏆 Your Stats</div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Videos Watched:</span>
                        <span id="videosWatched">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Codes Found:</span>
                        <span id="codesFound">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>🐼 Coins Earned:</span>
                        <span id="pandaCoinsEarned">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Diamonds Earned:</span>
                        <span id="pandaDiamonds">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>Success Rate:</span>
                        <span id="successRate">0%</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Rank Details Screen -->
        <div id="rankScreen" class="screen">
            <div class="rank-details">
                <div class="section-title">🏆 Your Rank Details</div>
                <div class="rank-info">
                    <div>
                        <div class="rank-number" id="rankNumber">1</div>
                        <div style="font-size: 18px; color: #ffd700;">Current Rank</div>
                    </div>
                    <div style="text-align: right;">
                        <div style="font-size: 24px; font-weight: bold;" id="coinsPerTapDisplay">1</div>
                        <div style="font-size: 14px; opacity: 0.8;">Coins per tap</div>
                    </div>
                </div>
                
                <div class="progress-bar">
                    <div class="progress-fill" id="rankProgressDetail" style="width: 0%"></div>
                </div>
                <div style="text-align: center; margin: 10px 0; font-size: 14px;">
                    <span id="currentCoinsDetail">0</span> / <span id="nextRankCoinsDetail">100</span> coins to next rank
                </div>
                
                <div class="rank-benefits">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 10px; color: #ffd700;">🎁 Current Benefits</div>
                    <div class="benefit-item">
                        <span>Coins per tap:</span>
                        <span id="currentBenefit">1 coin</span>
                    </div>
                    <div class="benefit-item">
                        <span>Energy capacity:</span>
                        <span>100 energy</span>
                    </div>
                    <div class="benefit-item">
                        <span>Refill time:</span>
                        <span>5 minutes</span>
                    </div>
                </div>
                
                <div class="rank-benefits" style="margin-top: 15px;">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 10px; color: #4CAF50;">⬆️ Next Rank Benefits</div>
                    <div class="benefit-item">
                        <span>Coins per tap:</span>
                        <span id="nextBenefit">2 coins</span>
                    </div>
                    <div class="benefit-item">
                        <span>Energy capacity:</span>
                        <span>100 energy</span>
                    </div>
                    <div class="benefit-item">
                        <span>Refill time:</span>
                        <span>5 minutes</span>
                    </div>
                </div>
            </div>

            <!-- Global Leaderboard -->
            <div class="rank-details" style="margin-top: 20px;">
                <div class="section-title">🌍 Global Leaderboard</div>
                <div style="background: rgba(255, 255, 255, 0.1); border-radius: 10px; padding: 15px;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <span style="font-size: 14px; font-weight: bold;">Your Global Position:</span>
                        <span style="font-size: 16px; color: #ffd700; font-weight: bold;" id="globalPosition">#1,247</span>
                    </div>
                    <div style="font-size: 12px; opacity: 0.8; text-align: center; margin-bottom: 15px;">
                        Top 10 Players Worldwide
                    </div>
                    
                    <div id="leaderboardList">
                        <!-- Leaderboard entries will be populated by JavaScript -->
                    </div>
                    
                    <div style="text-align: center; margin-top: 15px; font-size: 12px; opacity: 0.7;">
                        Last updated: <span id="leaderboardUpdate">Just now</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Live Crypto Chart Screen -->
        <div id="chartScreen" class="screen">
            <div class="crypto-chart">
                <div class="section-title">📈 Live Crypto Charts</div>
                
                <!-- Chart Selection Tabs -->
                <div class="chart-tabs">
                    <button class="chart-tab active" onclick="selectCrypto('BTCUSDT', 'Bitcoin')">₿ BTC</button>
                    <button class="chart-tab" onclick="selectCrypto('ETHUSDT', 'Ethereum')">Ξ ETH</button>
                    <button class="chart-tab" onclick="selectCrypto('DOGEUSDT', 'Dogecoin')">🐕 DOGE</button>
                    <button class="chart-tab" onclick="selectCrypto('ADAUSDT', 'Cardano')">₳ ADA</button>
                    <button class="chart-tab" onclick="selectCrypto('SOLUSDT', 'Solana')">◎ SOL</button>
                    <button class="chart-tab" onclick="selectCrypto('MATICUSDT', 'Polygon')">⬟ MATIC</button>
                </div>

                <!-- Main Chart Display -->
                <div class="main-chart-container">
                    <div class="chart-header">
                        <div class="chart-title">
                            <span id="selectedCryptoName">Bitcoin</span>
                            <span class="chart-symbol" id="selectedSymbol">BTCUSDT</span>
                        </div>
                        <div class="chart-price-info">
                            <div class="current-price" id="currentPrice">$0.00</div>
                            <div class="price-change" id="priceChange">+0.00%</div>
                        </div>
                    </div>
                    
                    <div class="chart-canvas-container">
                        <canvas id="priceChart" width="350" height="200"></canvas>
                        <div class="chart-loading" id="chartLoading">
                            <div class="loading-spinner"></div>
                            <div>Loading live data...</div>
                        </div>
                    </div>
                    
                    <!-- Time Frame Selector -->
                    <div class="timeframe-selector">
                        <button class="timeframe-btn" onclick="changeTimeframe('1m')">1m</button>
                        <button class="timeframe-btn" onclick="changeTimeframe('5m')">5m</button>
                        <button class="timeframe-btn active" onclick="changeTimeframe('15m')">15m</button>
                        <button class="timeframe-btn" onclick="changeTimeframe('1h')">1h</button>
                        <button class="timeframe-btn" onclick="changeTimeframe('4h')">4h</button>
                        <button class="timeframe-btn" onclick="changeTimeframe('1d')">1D</button>
                    </div>
                </div>
                
                <!-- Live Price Grid -->
                <div class="live-prices-grid">
                    <div class="section-title" style="margin-bottom: 15px;">🔴 Live Prices</div>
                    <div class="crypto-prices">
                        <div class="price-item" id="btc-item">
                            <div class="price-header">
                                <div class="price-symbol">₿ BTC</div>
                                <div class="price-24h" id="btc24h">+0.00%</div>
                            </div>
                            <div class="price-value" id="btcPrice">Loading...</div>
                            <div class="price-volume">Vol: <span id="btcVolume">0</span></div>
                        </div>
                        <div class="price-item" id="eth-item">
                            <div class="price-header">
                                <div class="price-symbol">Ξ ETH</div>
                                <div class="price-24h" id="eth24h">+0.00%</div>
                            </div>
                            <div class="price-value" id="ethPrice">Loading...</div>
                            <div class="price-volume">Vol: <span id="ethVolume">0</span></div>
                        </div>
                        <div class="price-item" id="doge-item">
                            <div class="price-header">
                                <div class="price-symbol">🐕 DOGE</div>
                                <div class="price-24h" id="doge24h">+0.00%</div>
                            </div>
                            <div class="price-value" id="dogePrice">Loading...</div>
                            <div class="price-volume">Vol: <span id="dogeVolume">0</span></div>
                        </div>
                        <div class="price-item" id="ada-item">
                            <div class="price-header">
                                <div class="price-symbol">₳ ADA</div>
                                <div class="price-24h" id="ada24h">+0.00%</div>
                            </div>
                            <div class="price-value" id="adaPrice">Loading...</div>
                            <div class="price-volume">Vol: <span id="adaVolume">0</span></div>
                        </div>
                        <div class="price-item" id="sol-item">
                            <div class="price-header">
                                <div class="price-symbol">◎ SOL</div>
                                <div class="price-24h" id="sol24h">+0.00%</div>
                            </div>
                            <div class="price-value" id="solPrice">Loading...</div>
                            <div class="price-volume">Vol: <span id="solVolume">0</span></div>
                        </div>
                        <div class="price-item" id="matic-item">
                            <div class="price-header">
                                <div class="price-symbol">⬟ MATIC</div>
                                <div class="price-24h" id="matic24h">+0.00%</div>
                            </div>
                            <div class="price-value" id="maticPrice">Loading...</div>
                            <div class="price-volume">Vol: <span id="maticVolume">0</span></div>
                        </div>
                    </div>
                </div>
                
                <div class="data-source">
                    <div style="display: flex; align-items: center; justify-content: space-between;">
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <div class="live-indicator"></div>
                            <span>Live data from Binance API</span>
                        </div>
                        <span id="lastUpdated">Just now</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Panda Trade Screen -->
        <div id="pandaTradeScreen" class="screen">
            <div class="panda-trade-container">
                <div class="section-title">🐼 Panda Trade - Live Bitcoin Trading</div>
                
                <!-- Trading Chart Section -->
                <div class="trading-chart-section">
                    <div class="chart-header">
                        <div class="trading-pair">
                            <span class="pair-symbol">BTC/USDT</span>
                            <div class="live-price-display">
                                <span id="tradingPrice">$43,250.00</span>
                                <span id="tradingChange" class="price-change positive">+2.45%</span>
                            </div>
                        </div>
                        <div class="panda-indicator">
                            <div class="panda-avatar" id="tradingPanda">🐼</div>
                            <div class="panda-status" id="pandaStatus">Watching...</div>
                        </div>
                    </div>
                    
                    <!-- Real-time Dot Line Chart -->
                    <div class="candlestick-container">
                        <canvas id="candlestickChart" width="350" height="250"></canvas>
                        <div class="chart-loading" id="candlestickLoading">
                            <div class="loading-spinner"></div>
                            <div>Loading live price data...</div>
                        </div>
                    </div>
                    
                    <!-- Chart Controls -->
                    <div class="chart-controls">
                        <div class="timeframe-controls">
                            <button class="timeframe-btn" onclick="changeCandlestickTimeframe('1m')">1m</button>
                            <button class="timeframe-btn active" onclick="changeCandlestickTimeframe('5m')">5m</button>
                            <button class="timeframe-btn" onclick="changeCandlestickTimeframe('15m')">15m</button>
                            <button class="timeframe-btn" onclick="changeCandlestickTimeframe('1h')">1h</button>
                        </div>
                    </div>
                </div>
                
                <!-- Avatar Skin Trading Section -->
                <div class="avatar-trading-section">
                    <div class="section-title">🎭 Trade Avatar Skins</div>
                    <div class="trading-balance">
                        <div class="balance-item">
                            <span>🐼 Panda Coins:</span>
                            <span id="tradingPandaCoins">0</span>
                        </div>
                        <div class="balance-item">
                            <span>💎 Diamonds:</span>
                            <span id="tradingDiamonds">0</span>
                        </div>
                    </div>
                    
                    <!-- Available Skins for Trading -->
                    <div class="trading-skins-grid">
                        <div class="trading-skin-card" data-skin="robot">
                            <div class="skin-preview">🤖</div>
                            <div class="skin-info">
                                <div class="skin-name">Robot Skin</div>
                                <div class="skin-price">50 🐼 + 10 💎</div>
                                <div class="skin-rarity rare">Rare</div>
                            </div>
                            <button class="trade-btn" onclick="tradeSkin('robot', 50, 10)">Trade</button>
                        </div>
                        
                        <div class="trading-skin-card" data-skin="alien">
                            <div class="skin-preview">👽</div>
                            <div class="skin-info">
                                <div class="skin-name">Alien Skin</div>
                                <div class="skin-price">75 🐼 + 15 💎</div>
                                <div class="skin-rarity epic">Epic</div>
                            </div>
                            <button class="trade-btn" onclick="tradeSkin('alien', 75, 15)">Trade</button>
                        </div>
                        
                        <div class="trading-skin-card" data-skin="ninja">
                            <div class="skin-preview">🥷</div>
                            <div class="skin-info">
                                <div class="skin-name">Ninja Skin</div>
                                <div class="skin-price">100 🐼 + 25 💎</div>
                                <div class="skin-rarity legendary">Legendary</div>
                            </div>
                            <button class="trade-btn" onclick="tradeSkin('ninja', 100, 25)">Trade</button>
                        </div>
                        
                        <div class="trading-skin-card" data-skin="wizard">
                            <div class="skin-preview">🧙</div>
                            <div class="skin-info">
                                <div class="skin-name">Wizard Skin</div>
                                <div class="skin-price">150 🐼 + 40 💎</div>
                                <div class="skin-rarity mythic">Mythic</div>
                            </div>
                            <button class="trade-btn" onclick="tradeSkin('wizard', 150, 40)">Trade</button>
                        </div>
                        
                        <div class="trading-skin-card" data-skin="dragon">
                            <div class="skin-preview">🐉</div>
                            <div class="skin-info">
                                <div class="skin-name">Dragon Skin</div>
                                <div class="skin-price">200 🐼 + 60 💎</div>
                                <div class="skin-rarity divine">Divine</div>
                            </div>
                            <button class="trade-btn" onclick="tradeSkin('dragon', 200, 60)">Trade</button>
                        </div>
                        
                        <div class="trading-skin-card" data-skin="phoenix">
                            <div class="skin-preview">🔥</div>
                            <div class="skin-info">
                                <div class="skin-name">Phoenix Skin</div>
                                <div class="skin-price">300 🐼 + 100 💎</div>
                                <div class="skin-rarity divine">Divine</div>
                            </div>
                            <button class="trade-btn" onclick="tradeSkin('phoenix', 300, 100)">Trade</button>
                        </div>
                    </div>
                </div>
                
                <!-- Trading Statistics -->
                <div class="trading-stats-section">
                    <div class="section-title">📊 Trading Statistics</div>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalTrades">0</div>
                            <div class="stat-label">Total Trades</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="successfulTrades">0</div>
                            <div class="stat-label">Successful</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="skinsOwned">1</div>
                            <div class="stat-label">Skins Owned</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="tradingProfit">0</div>
                            <div class="stat-label">Profit (🐼)</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Crypto News Screen -->
        <div id="newsScreen" class="screen">
            <div class="news-section">
                <div class="section-title">📰 Latest Crypto News</div>
                
                <div class="news-item" onclick="openNewsArticle('bitcoin-surge')">
                    <div class="news-title">Bitcoin Surges Past $43K Amid Institutional Interest</div>
                    <div class="news-summary">Major financial institutions continue to show strong interest in Bitcoin, driving prices higher as adoption increases across traditional finance sectors.</div>
                    <div class="news-time">2 hours ago</div>
                </div>
                
                <div class="news-item" onclick="openNewsArticle('ethereum-upgrade')">
                    <div class="news-title">Ethereum Network Upgrade Shows Promising Results</div>
                    <div class="news-summary">The latest Ethereum upgrade has successfully reduced transaction fees by 30% while improving network efficiency and security measures.</div>
                    <div class="news-time">4 hours ago</div>
                </div>
                
                <div class="news-item" onclick="openNewsArticle('altcoin-rally')">
                    <div class="news-title">Altcoin Market Experiences Strong Rally</div>
                    <div class="news-summary">Several alternative cryptocurrencies including Solana, Cardano, and Polygon have seen significant gains following positive market sentiment.</div>
                    <div class="news-time">6 hours ago</div>
                </div>
                
                <div class="news-item" onclick="openNewsArticle('defi-growth')">
                    <div class="news-title">DeFi Protocols Report Record Growth</div>
                    <div class="news-summary">Decentralized Finance platforms have reached new milestones in total value locked, indicating growing confidence in DeFi ecosystems.</div>
                    <div class="news-time">8 hours ago</div>
                </div>
                
                <div class="news-item" onclick="openNewsArticle('regulation-news')">
                    <div class="news-title">Positive Regulatory Developments in Major Markets</div>
                    <div class="news-summary">Several countries have announced clearer cryptocurrency regulations, providing more certainty for investors and businesses in the crypto space.</div>
                    <div class="news-time">12 hours ago</div>
                </div>
            </div>
        </div>

        <!-- Settings Screen -->
        <div id="settingsScreen" class="screen">
            <div class="settings-section">
                <div class="section-title">👤 Profile Settings</div>
                <div style="text-align: center; margin-bottom: 20px;">
                    <div class="profile-picture" id="profilePicture">
                        <span style="font-size: 40px;">👤</span>
                    </div>
                    <input type="file" id="profileImageInput" accept="image/*" style="display: none;" onchange="uploadProfilePicture()">
                    <button class="btn btn-success" onclick="document.getElementById('profileImageInput').click()" style="margin-top: 10px; padding: 8px 16px; font-size: 12px;">
                        📷 Upload Custom Picture
                    </button>
                </div>

                <div style="margin-bottom: 20px;">
                    <div style="font-size: 16px; font-weight: bold; margin-bottom: 15px; color: #ffd700;">🎭 Avatar Skins</div>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin-bottom: 15px;">
                        <button class="avatar-skin-btn selected" onclick="selectAvatarSkin('default')" data-skin="default">
                            <span style="font-size: 24px;">👤</span>
                            <div style="font-size: 10px; margin-top: 5px;">Default</div>
                        </button>
                        <button class="avatar-skin-btn" onclick="selectAvatarSkin('ghost')" data-skin="ghost">
                            <svg width="24" height="24" viewBox="0 0 64 64" fill="none" style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                <defs>
                                    <style>.cls-1{fill:#e0e9ee;}.cls-2{fill:#748a95;}.cls-3{fill:#617880;}.cls-4{fill:#f0f4f7;}.cls-5{fill:#d0e1e8;}</style>
                                </defs>
                                <g id="Skeleton">
                                    <path class="cls-1" d="M43.29,43.19A17,17,0,0,1,48,53.73,2.17,2.17,0,0,1,45.8,56H33l-1-.63L31,56H18.2A2.17,2.17,0,0,1,16,53.73a17,17,0,0,1,4.74-10.54Z"/>
                                    <path class="cls-2" d="M22.36,33a9,9,0,0,0-3.75,7c0,3.25,4.55,4.35,9.92,7.05a9.18,9.18,0,0,0,2.47.89l1-.72,1,.72A9.18,9.18,0,0,0,35.47,47c5.37-2.7,9.92-3.8,9.92-7.05a9,9,0,0,0-3.75-7Z"/>
                                    <path class="cls-3" d="M32,42.51a1,1,0,0,0-1,1v4.41a5.6,5.6,0,0,0,2,0V43.51A1,1,0,0,0,32,42.51Z"/>
                                    <path class="cls-4" d="M42.23,29a1.87,1.87,0,0,1,.7,3.67l-3.36.9v3.4a2.42,2.42,0,0,1-2.43,2.43H26.86a2.42,2.42,0,0,1-2.43-2.43v-3.4l-3.36-.9A1.87,1.87,0,0,1,21.8,29a13,13,0,1,1,20.43,0Z"/>
                                    <path class="cls-5" d="M39.09,21.4l-4.26.25a1.33,1.33,0,0,0-1.22,1,3.19,3.19,0,0,0,0,.54,3.49,3.49,0,0,0,7,0,3.6,3.6,0,0,0-.13-.93A1.37,1.37,0,0,0,39.09,21.4Z"/>
                                    <path class="cls-5" d="M23.59,22.22a3.6,3.6,0,0,0-.13.93,3.49,3.49,0,0,0,7,0,3.12,3.12,0,0,0,0-.54,1.33,1.33,0,0,0-1.22-1l-4.26-.25A1.37,1.37,0,0,0,23.59,22.22Z"/>
                                    <path class="cls-5" d="M33.34,29.42l.91,1.83a1.84,1.84,0,0,1-1.65,2.67H31.4a1.84,1.84,0,0,1-1.65-2.67l.91-1.83A1.49,1.49,0,0,1,33.34,29.42Z"/>
                                    <path class="cls-5" d="M33,56V51.67a1,1,0,0,0-2,0V56Z"/>
                                </g>
                            </svg>
                            <div style="font-size: 10px; margin-top: 5px;">Skeleton</div>
                        </button>
                        <button class="avatar-skin-btn" onclick="selectAvatarSkin('robot')" data-skin="robot">
                            <span style="font-size: 24px;">🤖</span>
                            <div style="font-size: 10px; margin-top: 5px;">Robot</div>
                        </button>
                        <button class="avatar-skin-btn" onclick="selectAvatarSkin('alien')" data-skin="alien">
                            <span style="font-size: 24px;">👽</span>
                            <div style="font-size: 10px; margin-top: 5px;">Alien</div>
                        </button>
                        <button class="avatar-skin-btn" onclick="selectAvatarSkin('ninja')" data-skin="ninja">
                            <svg width="24" height="24" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                <path fill="#42484C" d="M1.072 17.668l2.048-1.434l6.31 9.011l-2.048 1.434z"/>
                                <path fill="#66757F" d="M3.897 16.909L1.44 18.63a.501.501 0 0 1-.573-.819l2.457-1.721a.501.501 0 0 1 .573.819zm6.555 7.618l-4.096 2.868a.501.501 0 0 1-.573-.819l4.096-2.868a.501.501 0 0 1 .573.819z"/>
                                <path d="M6.971 26.966l2.868-2.008L15 32.331l-2.867 2.008zm-4.752-7.66l2.048-1.434l.573.82l-2.048 1.433zm1.147 1.638l2.048-1.434l.573.82l-2.048 1.434zm1.147 1.639l2.048-1.434l.574.82l-2.048 1.434zm1.147 1.639l2.048-1.434l.574.819l-2.048 1.434z" fill="#000000"/>
                                <path fill="#292F33" d="M23.35 20.14s3.921 3.102 2.223 6.86c.001 0-4.541-2.318-2.223-6.86z"/>
                                <path d="M25.967 25.593c.191-1.638-.552-3.065-1.296-4.05a8.75 8.75 0 0 0-1.667-.602c-.04.111-.061.215-.093.324c.139 2.639 1.694 3.814 3.056 4.328z" fill="#000000"/>
                                <path fill="#292F33" d="M23 20s4.905.968 5.112 5.086c0 0-5.099.013-5.112-5.086zm9 16v-2c0-3.314-2.685-6-6-6H10a6 6 0 0 0-6 6v2h28z"/>
                                <path fill="#292F33" d="M12.799 26.751h10.403V31H12.799z"/>
                                <path fill="#292F33" d="M14 27h8s-1.018 7-4 7s-4-7-4-7"/>
                                <path fill="#292F33" d="M13.64 30.038c1.744 1.268 2.848 1.963 4.36 1.963c1.512 0 2.615-.696 4.359-1.963v-5.749h-8.72v5.749z"/>
                                <path d="M13.632 25.973c1.216 1.374 2.724 1.746 4.364 1.746c1.639 0 3.146-.373 4.363-1.746v-3.491h-8.728v3.491z" fill="#000000"/>
                                <path fill="#292F33" d="M11.444 15.936c0 1.448-.734 2.622-1.639 2.622s-1.639-1.174-1.639-2.622s.734-2.623 1.639-2.623c.905-.001 1.639 1.174 1.639 2.623m16.389 0c0 1.448-.733 2.622-1.639 2.622c-.905 0-1.639-1.174-1.639-2.622s.733-2.623 1.639-2.623c.906-.001 1.639 1.174 1.639 2.623"/>
                                <path fill="#292F33" d="M9.477 16.54C9.477 9 12 5 18 5s8.522 4 8.522 11.54c0 5.821-3.815 10.54-8.522 10.54c-4.707 0-8.523-4.719-8.523-10.54"/>
                                <path fill="#66757F" d="M11 28c0 1 1 3 3 5c1.581 1.581 2.719 3 2.719 3c.797-.005 1.9-.004 2.73-.001c-.891-2.02-2.477-3.471-3.279-4.273C15.17 30.726 13 29 13 27c0-1-2 1-2 1"/>
                                <path fill="#292F33" d="M16.719 36l2.724-.001c-.512-1.161-1.251-2.127-1.94-2.897a11.874 11.874 0 0 0-1.405 2.16c.388.449.621.738.621.738z"/>
                                <path fill="#66757F" d="M25 28c0 1-1 3-3 5c-1.581 1.581-2.5 3-2.5 3c-.902-.004-1.418-.002-3 0c.891-2.02 2.528-3.472 3.33-4.274C20.83 30.726 23 29 23 27c0-1 2 1 2 1"/>
                                <path fill="#F7DECE" d="M18 13.711c-2.995 0-8.116-2.044-7.064 1.98c.614 2.348 1.417 2.881 3.475 2.606c2.124-.283 1.991-1.016 3.495-1.016s1.56.733 3.684 1.016c2.058.274 2.861-.258 3.475-2.606c1.051-4.024-4.07-1.98-7.065-1.98z"/>
                                <path fill="#662113" d="M14 17c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1m8 0c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1"/>
                            </svg>
                            <div style="font-size: 10px; margin-top: 5px;">Ninja</div>
                        </button>
                        <button class="avatar-skin-btn" onclick="selectAvatarSkin('wizard')" data-skin="wizard">
                            <span style="font-size: 24px;">🧙</span>
                            <div style="font-size: 10px; margin-top: 5px;">Wizard</div>
                        </button>
                    </div>
                    <div style="font-size: 12px; opacity: 0.8; text-align: center;">
                        Selected: <span id="selectedSkin">Default</span>
                    </div>
                </div>
                
                <input type="text" class="wallet-input" id="usernameInput" placeholder="Enter new username">
                <button class="btn btn-primary" onclick="changeUsername()">Update Username</button>
            </div>

            <div class="settings-section">
                <div class="section-title">🎨 Background Settings</div>
                <div style="margin-bottom: 15px;">
                    <strong>Choose Background:</strong>
                </div>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 15px;">
                    <button class="btn btn-primary" onclick="setBackground('default')" style="padding: 8px; font-size: 12px;">
                        🌈 Default Gradient
                    </button>
                    <button class="btn btn-primary" onclick="setBackground('crypto')" style="padding: 8px; font-size: 12px;">
                        ₿ Crypto Theme
                    </button>
                    <button class="btn btn-primary" onclick="setBackground('space')" style="padding: 8px; font-size: 12px;">
                        🌌 Space Theme
                    </button>
                    <button class="btn btn-primary" onclick="setBackground('nature')" style="padding: 8px; font-size: 12px;">
                        🌿 Nature Theme
                    </button>
                </div>
                <div style="margin-bottom: 15px;">
                    <strong>Or Upload Custom Image:</strong>
                </div>
                <input type="file" id="backgroundImageInput" accept="image/*" style="display: none;" onchange="uploadBackgroundImage()">
                <button class="btn btn-success" onclick="document.getElementById('backgroundImageInput').click()">
                    🖼️ Upload Background
                </button>
                <button class="btn btn-warning" onclick="removeBackground()" style="margin-top: 5px;">
                    🗑️ Remove Custom Background
                </button>
            </div>

            <div class="settings-section">
                <div class="section-title">🔗 Referral System</div>
                <div style="margin-bottom: 15px;">
                    <strong>Your Referral Link:</strong>
                </div>
                <div class="referral-link" id="referralLink">
                    https://taptap.crypto/ref/TapMaster123
                </div>
                <button class="btn btn-success" onclick="copyReferralLink()">📋 Copy Link</button>
                <div style="margin-top: 15px;">
                    <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                        <span>Referrals:</span>
                        <span id="referralCount">0</span>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>Bonus Earned:</span>
                        <span id="referralBonus">0 coins</span>
                    </div>
                </div>
                <div style="font-size: 12px; margin-top: 10px; opacity: 0.8;">
                    Earn 50 gold coins + 10 diamonds for each successful referral!
                </div>
            </div>

            <div class="settings-section">
                <div class="section-title">ℹ️ Game Info</div>
                <div style="font-size: 14px; line-height: 1.6;">
                    <p><strong>How to Play:</strong></p>
                    <p>• Tap the Bitcoin to earn coins</p>
                    <p>• Energy refills every 5 minutes</p>
                    <p>• Watch ads to earn diamonds</p>
                    <p>• Refer friends for bonus coins</p>
                    <p>• Rank up to unlock more features</p>
                </div>
            </div>
        </div>

        <!-- Bottom Navigation -->
        <div class="bottom-nav">
            <div class="nav-item" onclick="showScreen('gameScreen')">
                <div class="nav-icon">🎮</div>
                <div class="nav-label">Game</div>
            </div>
            <div class="nav-item" onclick="showScreen('pandaScreen')">
                <div class="nav-icon">🐼</div>
                <div class="nav-label">PandaCode</div>
            </div>
            <div class="nav-item" onclick="showScreen('walletScreen')">
                <div class="nav-icon">💰</div>
                <div class="nav-label">Wallet</div>
            </div>
            <div class="nav-item" onclick="showScreen('adsScreen')">
                <div class="nav-icon">📺</div>
                <div class="nav-label">Ads</div>
            </div>
            <div class="nav-item" onclick="showScreen('settingsScreen')">
                <div class="nav-icon">⚙️</div>
                <div class="nav-label">Settings</div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div id="walletModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal('walletModal')">&times;</span>
            <h3>Connect Wallet</h3>
            <p>Connection fee: 1 USDT</p>
            <p>This will be sent to the owner's wallet for verification.</p>
            <button class="btn btn-primary" onclick="processWalletConnection()">Confirm Payment</button>
        </div>
    </div>

    <div id="adModal" class="modal">
        <div class="modal-content">
            <span class="close-modal" onclick="closeModal('adModal')">&times;</span>
            <h3>🎥 Watching Ad...</h3>
            <div style="margin: 20px 0;">
                <div style="width: 100%; height: 100px; background: #333; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
                    <span style="color: #666;">Ad Content Here</span>
                </div>
            </div>
            <div id="adProgress">Ad will complete in <span id="adCountdown">15</span> seconds...</div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        // Game State
        let gameState = {
            coins: 0,
            diamonds: 0,
            pandaCoins: 0,
            energy: 100,
            maxEnergy: 100,
            level: 1,
            rank: 1,
            username: 'TapMaster',
            profilePicture: null,
            avatarSkin: 'default',
            backgroundImage: null,
            backgroundTheme: 'default',
            walletConnected: false,
            walletAddress: '',
            referrals: 0,
            adsWatched: 0,
            diamondsFromAds: 0,
            lastAdTime: 0,
            energyRefillTime: Date.now() + 300000, // 5 minutes
            isRefilling: false, // Track if energy is currently refilling
            refillStartTime: 0, // When the refill started
            energyAtRefillStart: 100, // Energy level when refill started
            // PandaCode game stats
            codesFound: 0,
            pandaDiamonds: 0,
            codeAttempts: 0,
            lastCodeSubmission: 0,
            videosWatched: 0,
            globalPosition: 1247, // Player's global ranking position
            // Trading system
            ownedSkins: ['default', 'ghost'], // Skins the player owns
            totalTrades: 0,
            successfulTrades: 0,
            tradingProfit: 0
        };

        // Global leaderboard data (simulated)
        const globalLeaderboard = [
            { rank: 1, name: 'CryptoKing', coins: 2847593, avatar: '👑' },
            { rank: 2, name: 'BitcoinMaster', coins: 2654821, avatar: '🤖' },
            { rank: 3, name: 'DiamondHands', coins: 2398476, avatar: '💎' },
            { rank: 4, name: 'MoonWalker', coins: 2156789, avatar: '🚀' },
            { rank: 5, name: 'TapLegend', coins: 1987654, avatar: '⚡' },
            { rank: 6, name: 'CoinCollector', coins: 1876543, avatar: '🏆' },
            { rank: 7, name: 'NinjaTrader', coins: 1765432, avatar: '🥷' },
            { rank: 8, name: 'GoldRush', coins: 1654321, avatar: '🌟' },
            { rank: 9, name: 'TapMachine', coins: 1543210, avatar: '🔥' },
            { rank: 10, name: 'CryptoWhale', coins: 1432109, avatar: '🐋' }
        ];

        // Rank thresholds (100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500)
        const rankThresholds = [0, 100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500];

        // Load saved game state
        function loadGameState() {
            const saved = localStorage.getItem('tapTapGameState');
            if (saved) {
                gameState = { ...gameState, ...JSON.parse(saved) };
            }
            updateDisplay();
        }

        // Save game state
        function saveGameState() {
            localStorage.setItem('tapTapGameState', JSON.stringify(gameState));
        }

        // Update all display elements
        function updateDisplay() {
            document.getElementById('coinCount').textContent = gameState.coins;
            document.getElementById('diamondCount').textContent = gameState.diamonds;
            document.getElementById('pandaCoinCount').textContent = gameState.pandaCoins;
            document.getElementById('levelDisplay').textContent = gameState.level;
            document.getElementById('displayUsername').textContent = gameState.username;
            document.getElementById('rankDisplay').textContent = `Rank ${gameState.rank}`;
            document.getElementById('energyText').textContent = `${gameState.energy}/${gameState.maxEnergy}`;
            
            // Update energy bar with color coding
            const energyPercentage = (gameState.energy / gameState.maxEnergy) * 100;
            const energyFill = document.getElementById('energyFill');
            energyFill.style.width = `${energyPercentage}%`;
            
            // Remove existing color classes
            energyFill.classList.remove('low', 'medium', 'high');
            
            // Add appropriate color class
            if (energyPercentage <= 30) {
                energyFill.classList.add('low');
            } else if (energyPercentage <= 70) {
                energyFill.classList.add('medium');
            } else {
                energyFill.classList.add('high');
            }

            // Update Bitcoin tap visual state
            const bitcoinTap = document.getElementById('bitcoinTap');
            if (gameState.energy <= 0) {
                bitcoinTap.classList.add('disabled');
            } else {
                bitcoinTap.classList.remove('disabled');
            }
            
            document.getElementById('withdrawBalance').textContent = gameState.diamonds;
            document.getElementById('referralCount').textContent = gameState.referrals;
            document.getElementById('referralBonus').textContent = `${gameState.referrals * 50} coins + ${gameState.referrals * 10} diamonds`;
            document.getElementById('adsWatchedToday').textContent = gameState.adsWatched;
            document.getElementById('totalAdsWatched').textContent = gameState.adsWatched;
            document.getElementById('diamondsFromAds').textContent = gameState.diamondsFromAds;
            
            // Update PandaCode stats
            if (document.getElementById('codesFound')) {
                document.getElementById('videosWatched').textContent = gameState.videosWatched;
                document.getElementById('codesFound').textContent = gameState.codesFound;
                document.getElementById('pandaCoinsEarned').textContent = gameState.pandaCoins;
                document.getElementById('pandaDiamonds').textContent = gameState.pandaDiamonds;
                const successRate = gameState.codeAttempts > 0 ? Math.round((gameState.codesFound / gameState.codeAttempts) * 100) : 0;
                document.getElementById('successRate').textContent = `${successRate}%`;
            }
            
            // Update profile pictures
            updateProfilePictures();
            
            // Update background
            updateBackground();
            
            // Update avatar skin selection
            updateAvatarSkinSelection();
            
            updateRankProgress();
            updateWithdrawButton();
            updateBitcoinDots();
        }

        // Update rank progress
        function updateRankProgress() {
            const currentRankCoins = rankThresholds[gameState.rank - 1] || 0;
            const nextRankCoins = rankThresholds[gameState.rank] || rankThresholds[rankThresholds.length - 1];
            const progress = ((gameState.coins - currentRankCoins) / (nextRankCoins - currentRankCoins)) * 100;
            
            document.getElementById('currentCoins').textContent = gameState.coins;
            document.getElementById('nextRankCoins').textContent = nextRankCoins;
            document.getElementById('rankProgress').style.width = `${Math.max(0, Math.min(100, progress))}%`;
            
            // Check for rank up
            if (gameState.coins >= nextRankCoins && gameState.rank < rankThresholds.length - 1) {
                gameState.rank++;
                gameState.level = gameState.rank;
                showNotification(`🎉 Rank Up! You're now Rank ${gameState.rank}!`);
                updateDisplay();
            }
        }

        // Update withdraw button (always locked for team control)
        function updateWithdrawButton() {
            const withdrawBtn = document.getElementById('withdrawBtn');
            withdrawBtn.disabled = true;
            withdrawBtn.innerHTML = '🔒 Withdraw (Team Controlled)';
            withdrawBtn.className = 'btn btn-warning';
        }

        // Track last tap time for auto-refill
        let lastTapTime = 0;
        let tapTimeout = null;

        // Bitcoin tap function
        document.getElementById('bitcoinTap').addEventListener('click', function(e) {
            if (gameState.energy <= 0) {
                showNotification('⚡ No energy! Wait for refill.');
                return;
            }

            // Stop any ongoing refill when tapping
            if (gameState.isRefilling) {
                gameState.isRefilling = false;
            }

            // Calculate coins per tap based on rank
            const coinsPerTap = gameState.rank;
            gameState.coins += coinsPerTap;
            gameState.energy = Math.max(0, gameState.energy - 1);

            // Update last tap time
            lastTapTime = Date.now();

            // Clear existing timeout
            if (tapTimeout) {
                clearTimeout(tapTimeout);
            }

            // Set timeout to start refilling after 2 seconds of no tapping
            tapTimeout = setTimeout(() => {
                if (gameState.energy < gameState.maxEnergy && !gameState.isRefilling) {
                    startEnergyRefill();
                }
            }, 2000);

            // Check if player earned a diamond (every 1000 coins)
            const diamondsEarned = Math.floor(gameState.coins / 1000);
            const currentDiamonds = gameState.diamonds;
            if (diamondsEarned > currentDiamonds) {
                gameState.diamonds = diamondsEarned;
                showNotification('💎 Diamond earned! (1000 coins milestone)');
            }

            // Create tap effect
            const effect = document.createElement('div');
            effect.className = 'tap-effect';
            effect.textContent = `+${coinsPerTap}`;
            effect.style.left = (e.clientX - e.target.getBoundingClientRect().left) + 'px';
            effect.style.top = (e.clientY - e.target.getBoundingClientRect().top) + 'px';
            
            document.querySelector('.bitcoin-container').appendChild(effect);
            setTimeout(() => effect.remove(), 1000);

            // Update display immediately to show correct energy level
            updateDisplay();
            saveGameState();
        });

        // Start energy refill from current level
        function startEnergyRefill() {
            if (gameState.energy >= gameState.maxEnergy) return;
            
            gameState.isRefilling = true;
            gameState.refillStartTime = Date.now();
            gameState.energyAtRefillStart = gameState.energy;
            
            // Calculate time needed based on missing energy
            // Total refill time is always 5 minutes (300 seconds) for full energy
            // Time per energy point = 300 seconds / 100 energy = 3 seconds per point
            const energyMissing = gameState.maxEnergy - gameState.energy;
            const refillTimeNeeded = energyMissing * 3000; // 3 seconds per energy point
            gameState.energyRefillTime = Date.now() + refillTimeNeeded;
        }

        // Energy refill system
        function updateEnergyRefill() {
            const now = Date.now();
            
            // Only refill if we're in refilling mode and energy is not full
            if (gameState.isRefilling && gameState.energy < gameState.maxEnergy) {
                // Calculate how much time has passed since refill started
                const timePassed = now - gameState.refillStartTime;
                
                // Calculate energy based on time passed (smooth progression)
                // Each energy point takes exactly 3 seconds
                const energyGained = Math.floor(timePassed / 3000);
                const newEnergy = Math.min(gameState.maxEnergy, gameState.energyAtRefillStart + energyGained);
                
                // Update energy if it has increased
                if (newEnergy > gameState.energy) {
                    gameState.energy = newEnergy;
                    updateDisplay();
                    saveGameState();
                }
                
                // If fully refilled, stop refilling mode
                if (gameState.energy >= gameState.maxEnergy) {
                    gameState.energy = gameState.maxEnergy;
                    gameState.isRefilling = false;
                    showNotification('⚡ Energy fully restored!');
                    updateDisplay();
                    saveGameState();
                }
            }

            // Update refill timer display
            const refillTimerElement = document.getElementById('refillTimer');
            const refillTextElement = refillTimerElement.parentElement;
            
            if (gameState.isRefilling && gameState.energy < gameState.maxEnergy) {
                const timeLeft = Math.max(0, gameState.energyRefillTime - now);
                const minutes = Math.floor(timeLeft / 60000);
                const seconds = Math.floor((timeLeft % 60000) / 1000);
                
                // Show "Refills in:" text and countdown timer while refilling
                refillTextElement.style.display = 'block';
                refillTextElement.innerHTML = `Refills in: <span id="refillTimer">${minutes}:${seconds.toString().padStart(2, '0')}</span>`;
            } else if (gameState.energy >= gameState.maxEnergy) {
                // Energy is full - show "Full!"
                refillTextElement.style.display = 'block';
                refillTextElement.innerHTML = `Refills in: <span id="refillTimer">Full!</span>`;
            } else if (gameState.energy === 0) {
                // Energy is empty but not refilling yet - show empty status
                refillTextElement.style.display = 'block';
                refillTextElement.innerHTML = `Refills in: <span id="refillTimer">Empty</span>`;
            } else {
                // Energy is decreasing during tapping - show "Tapping..."
                refillTextElement.style.display = 'block';
                refillTextElement.innerHTML = `Refills in: <span id="refillTimer">Tapping...</span>`;
            }
        }

        // Screen navigation
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
        }

        // Wallet connection
        function connectWallet() {
            const address = document.getElementById('walletAddress').value.trim();
            if (!address) {
                showNotification('❌ Please enter a wallet address');
                return;
            }
            document.getElementById('walletModal').style.display = 'block';
        }

        function processWalletConnection() {
            const address = document.getElementById('walletAddress').value.trim();
            gameState.walletConnected = true;
            gameState.walletAddress = address;
            
            // Simulate payment to owner wallet
            showNotification('✅ Wallet connected! 1 USDT sent to owner.');
            closeModal('walletModal');
            updateDisplay();
            saveGameState();
        }

        // Watch ad function
        function watchAd() {
            const now = Date.now();
            if (now - gameState.lastAdTime < 300000) { // 5 minutes cooldown
                const timeLeft = 300000 - (now - gameState.lastAdTime);
                const minutes = Math.floor(timeLeft / 60000);
                const seconds = Math.floor((timeLeft % 60000) / 1000);
                showNotification(`⏰ Next ad in ${minutes}:${seconds.toString().padStart(2, '0')}`);
                return;
            }

            document.getElementById('adModal').style.display = 'block';
            let countdown = 15;
            document.getElementById('adCountdown').textContent = countdown;

            const timer = setInterval(() => {
                countdown--;
                document.getElementById('adCountdown').textContent = countdown;
                
                if (countdown <= 0) {
                    clearInterval(timer);
                    gameState.diamonds += 1; // Changed from 10 to 1 diamond per ad
                    gameState.pandaCoins += 5; // Added 5 panda coins per ad
                    gameState.adsWatched++;
                    gameState.diamondsFromAds += 1;
                    gameState.lastAdTime = now;
                    
                    closeModal('adModal');
                    showNotification('💎 +1 Diamond & 🐼 +5 Panda Coins earned!');
                    updateDisplay();
                    saveGameState();
                }
            }, 1000);
        }

        // Withdraw function (team controlled)
        function withdraw() {
            showNotification('🔒 Withdrawals are controlled by our team and will be distributed when decided.');
        }

        // Change username
        function changeUsername() {
            const newUsername = document.getElementById('usernameInput').value.trim();
            if (!newUsername) {
                showNotification('❌ Please enter a username');
                return;
            }
            
            gameState.username = newUsername;
            document.getElementById('referralLink').textContent = `https://taptap.crypto/ref/${newUsername}123`;
            showNotification('✅ Username updated!');
            updateDisplay();
            saveGameState();
        }

        // Copy referral link
        function copyReferralLink() {
            const link = document.getElementById('referralLink').textContent;
            navigator.clipboard.writeText(link).then(() => {
                showNotification('📋 Referral link copied!');
            });
        }

        // Upload profile picture
        function uploadProfilePicture() {
            const file = document.getElementById('profileImageInput').files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    gameState.profilePicture = e.target.result;
                    updateProfilePictures();
                    saveGameState();
                    showNotification('✅ Profile picture updated!');
                };
                reader.readAsDataURL(file);
            }
        }

        // Select avatar skin
        function selectAvatarSkin(skinType) {
            gameState.avatarSkin = skinType;
            updateAvatarSkinSelection();
            updateProfilePictures();
            saveGameState();
            showNotification(`🎭 Avatar changed to ${skinType}!`);
        }

        // Update avatar skin selection UI
        function updateAvatarSkinSelection() {
            document.querySelectorAll('.avatar-skin-btn').forEach(btn => {
                btn.classList.remove('selected');
                if (btn.dataset.skin === gameState.avatarSkin) {
                    btn.classList.add('selected');
                }
            });
            
            const skinNames = {
                'default': 'Default',
                'ghost': 'Skeleton',
                'robot': 'Robot',
                'alien': 'Alien',
                'ninja': 'Ninja',
                'wizard': 'Wizard'
            };
            
            document.getElementById('selectedSkin').textContent = skinNames[gameState.avatarSkin] || 'Default';
        }

        // Update profile pictures in header and settings
        function updateProfilePictures() {
            const headerProfile = document.getElementById('headerProfile');
            const settingsProfile = document.getElementById('profilePicture');
            
            if (gameState.profilePicture) {
                // Use uploaded custom picture
                headerProfile.innerHTML = `<img src="${gameState.profilePicture}" alt="Profile">`;
                settingsProfile.innerHTML = `<img src="${gameState.profilePicture}" alt="Profile">`;
            } else {
                // Use selected avatar skin
                const avatarContent = getAvatarContent(gameState.avatarSkin);
                headerProfile.innerHTML = avatarContent.header;
                settingsProfile.innerHTML = avatarContent.settings;
            }
        }

        // Get avatar content based on skin type
        function getAvatarContent(skinType) {
            switch (skinType) {
                case 'ghost':
                    return {
                        header: `<svg width="20" height="20" viewBox="0 0 64 64" fill="none" style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                    <defs>
                                        <style>.cls-1{fill:#e0e9ee;}.cls-2{fill:#748a95;}.cls-3{fill:#617880;}.cls-4{fill:#f0f4f7;}.cls-5{fill:#d0e1e8;}</style>
                                    </defs>
                                    <g id="Skeleton">
                                        <path class="cls-1" d="M43.29,43.19A17,17,0,0,1,48,53.73,2.17,2.17,0,0,1,45.8,56H33l-1-.63L31,56H18.2A2.17,2.17,0,0,1,16,53.73a17,17,0,0,1,4.74-10.54Z"/>
                                        <path class="cls-2" d="M22.36,33a9,9,0,0,0-3.75,7c0,3.25,4.55,4.35,9.92,7.05a9.18,9.18,0,0,0,2.47.89l1-.72,1,.72A9.18,9.18,0,0,0,35.47,47c5.37-2.7,9.92-3.8,9.92-7.05a9,9,0,0,0-3.75-7Z"/>
                                        <path class="cls-3" d="M32,42.51a1,1,0,0,0-1,1v4.41a5.6,5.6,0,0,0,2,0V43.51A1,1,0,0,0,32,42.51Z"/>
                                        <path class="cls-4" d="M42.23,29a1.87,1.87,0,0,1,.7,3.67l-3.36.9v3.4a2.42,2.42,0,0,1-2.43,2.43H26.86a2.42,2.42,0,0,1-2.43-2.43v-3.4l-3.36-.9A1.87,1.87,0,0,1,21.8,29a13,13,0,1,1,20.43,0Z"/>
                                        <path class="cls-5" d="M39.09,21.4l-4.26.25a1.33,1.33,0,0,0-1.22,1,3.19,3.19,0,0,0,0,.54,3.49,3.49,0,0,0,7,0,3.6,3.6,0,0,0-.13-.93A1.37,1.37,0,0,0,39.09,21.4Z"/>
                                        <path class="cls-5" d="M23.59,22.22a3.6,3.6,0,0,0-.13.93,3.49,3.49,0,0,0,7,0,3.12,3.12,0,0,0,0-.54,1.33,1.33,0,0,0-1.22-1l-4.26-.25A1.37,1.37,0,0,0,23.59,22.22Z"/>
                                        <path class="cls-5" d="M33.34,29.42l.91,1.83a1.84,1.84,0,0,1-1.65,2.67H31.4a1.84,1.84,0,0,1-1.65-2.67l.91-1.83A1.49,1.49,0,0,1,33.34,29.42Z"/>
                                        <path class="cls-5" d="M33,56V51.67a1,1,0,0,0-2,0V56Z"/>
                                    </g>
                                </svg>`,
                        settings: `<svg width="40" height="40" viewBox="0 0 64 64" fill="none" style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                    <defs>
                                        <style>.cls-1{fill:#e0e9ee;}.cls-2{fill:#748a95;}.cls-3{fill:#617880;}.cls-4{fill:#f0f4f7;}.cls-5{fill:#d0e1e8;}</style>
                                    </defs>
                                    <g id="Skeleton">
                                        <path class="cls-1" d="M43.29,43.19A17,17,0,0,1,48,53.73,2.17,2.17,0,0,1,45.8,56H33l-1-.63L31,56H18.2A2.17,2.17,0,0,1,16,53.73a17,17,0,0,1,4.74-10.54Z"/>
                                        <path class="cls-2" d="M22.36,33a9,9,0,0,0-3.75,7c0,3.25,4.55,4.35,9.92,7.05a9.18,9.18,0,0,0,2.47.89l1-.72,1,.72A9.18,9.18,0,0,0,35.47,47c5.37-2.7,9.92-3.8,9.92-7.05a9,9,0,0,0-3.75-7Z"/>
                                        <path class="cls-3" d="M32,42.51a1,1,0,0,0-1,1v4.41a5.6,5.6,0,0,0,2,0V43.51A1,1,0,0,0,32,42.51Z"/>
                                        <path class="cls-4" d="M42.23,29a1.87,1.87,0,0,1,.7,3.67l-3.36.9v3.4a2.42,2.42,0,0,1-2.43,2.43H26.86a2.42,2.42,0,0,1-2.43-2.43v-3.4l-3.36-.9A1.87,1.87,0,0,1,21.8,29a13,13,0,1,1,20.43,0Z"/>
                                        <path class="cls-5" d="M39.09,21.4l-4.26.25a1.33,1.33,0,0,0-1.22,1,3.19,3.19,0,0,0,0,.54,3.49,3.49,0,0,0,7,0,3.6,3.6,0,0,0-.13-.93A1.37,1.37,0,0,0,39.09,21.4Z"/>
                                        <path class="cls-5" d="M23.59,22.22a3.6,3.6,0,0,0-.13.93,3.49,3.49,0,0,0,7,0,3.12,3.12,0,0,0,0-.54,1.33,1.33,0,0,0-1.22-1l-4.26-.25A1.37,1.37,0,0,0,23.59,22.22Z"/>
                                        <path class="cls-5" d="M33.34,29.42l.91,1.83a1.84,1.84,0,0,1-1.65,2.67H31.4a1.84,1.84,0,0,1-1.65-2.67l.91-1.83A1.49,1.49,0,0,1,33.34,29.42Z"/>
                                        <path class="cls-5" d="M33,56V51.67a1,1,0,0,0-2,0V56Z"/>
                                    </g>
                                </svg>`
                    };
                case 'robot':
                    return {
                        header: '<span style="font-size: 20px;">🤖</span>',
                        settings: '<span style="font-size: 40px;">🤖</span>'
                    };
                case 'alien':
                    return {
                        header: '<span style="font-size: 20px;">👽</span>',
                        settings: '<span style="font-size: 40px;">👽</span>'
                    };
                case 'ninja':
                    return {
                        header: `<svg width="20" height="20" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                    <path fill="#42484C" d="M1.072 17.668l2.048-1.434l6.31 9.011l-2.048 1.434z"/>
                                    <path fill="#66757F" d="M3.897 16.909L1.44 18.63a.501.501 0 0 1-.573-.819l2.457-1.721a.501.501 0 0 1 .573.819zm6.555 7.618l-4.096 2.868a.501.501 0 0 1-.573-.819l4.096-2.868a.501.501 0 0 1 .573.819z"/>
                                    <path d="M6.971 26.966l2.868-2.008L15 32.331l-2.867 2.008zm-4.752-7.66l2.048-1.434l.573.82l-2.048 1.433zm1.147 1.638l2.048-1.434l.573.82l-2.048 1.434zm1.147 1.639l2.048-1.434l.574.82l-2.048 1.434zm1.147 1.639l2.048-1.434l.574.819l-2.048 1.434z" fill="#000000"/>
                                    <path fill="#292F33" d="M23.35 20.14s3.921 3.102 2.223 6.86c.001 0-4.541-2.318-2.223-6.86z"/>
                                    <path d="M25.967 25.593c.191-1.638-.552-3.065-1.296-4.05a8.75 8.75 0 0 0-1.667-.602c-.04.111-.061.215-.093.324c.139 2.639 1.694 3.814 3.056 4.328z" fill="#000000"/>
                                    <path fill="#292F33" d="M23 20s4.905.968 5.112 5.086c0 0-5.099.013-5.112-5.086zm9 16v-2c0-3.314-2.685-6-6-6H10a6 6 0 0 0-6 6v2h28z"/>
                                    <path fill="#292F33" d="M12.799 26.751h10.403V31H12.799z"/>
                                    <path fill="#292F33" d="M14 27h8s-1.018 7-4 7s-4-7-4-7"/>
                                    <path fill="#292F33" d="M13.64 30.038c1.744 1.268 2.848 1.963 4.36 1.963c1.512 0 2.615-.696 4.359-1.963v-5.749h-8.72v5.749z"/>
                                    <path d="M13.632 25.973c1.216 1.374 2.724 1.746 4.364 1.746c1.639 0 3.146-.373 4.363-1.746v-3.491h-8.728v3.491z" fill="#000000"/>
                                    <path fill="#292F33" d="M11.444 15.936c0 1.448-.734 2.622-1.639 2.622s-1.639-1.174-1.639-2.622s.734-2.623 1.639-2.623c.905-.001 1.639 1.174 1.639 2.623m16.389 0c0 1.448-.733 2.622-1.639 2.622c-.905 0-1.639-1.174-1.639-2.622s.733-2.623 1.639-2.623c.906-.001 1.639 1.174 1.639 2.623"/>
                                    <path fill="#292F33" d="M9.477 16.54C9.477 9 12 5 18 5s8.522 4 8.522 11.54c0 5.821-3.815 10.54-8.522 10.54c-4.707 0-8.523-4.719-8.523-10.54"/>
                                    <path fill="#66757F" d="M11 28c0 1 1 3 3 5c1.581 1.581 2.719 3 2.719 3c.797-.005 1.9-.004 2.73-.001c-.891-2.02-2.477-3.471-3.279-4.273C15.17 30.726 13 29 13 27c0-1-2 1-2 1"/>
                                    <path fill="#292F33" d="M16.719 36l2.724-.001c-.512-1.161-1.251-2.127-1.94-2.897a11.874 11.874 0 0 0-1.405 2.16c.388.449.621.738.621.738z"/>
                                    <path fill="#66757F" d="M25 28c0 1-1 3-3 5c-1.581 1.581-2.5 3-2.5 3c-.902-.004-1.418-.002-3 0c.891-2.02 2.528-3.472 3.33-4.274C20.83 30.726 23 29 23 27c0-1 2 1 2 1"/>
                                    <path fill="#F7DECE" d="M18 13.711c-2.995 0-8.116-2.044-7.064 1.98c.614 2.348 1.417 2.881 3.475 2.606c2.124-.283 1.991-1.016 3.495-1.016s1.56.733 3.684 1.016c2.058.274 2.861-.258 3.475-2.606c1.051-4.024-4.07-1.98-7.065-1.98z"/>
                                    <path fill="#662113" d="M14 17c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1m8 0c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1"/>
                                </svg>`,
                        settings: `<svg width="40" height="40" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                                    <path fill="#42484C" d="M1.072 17.668l2.048-1.434l6.31 9.011l-2.048 1.434z"/>
                                    <path fill="#66757F" d="M3.897 16.909L1.44 18.63a.501.501 0 0 1-.573-.819l2.457-1.721a.501.501 0 0 1 .573.819zm6.555 7.618l-4.096 2.868a.501.501 0 0 1-.573-.819l4.096-2.868a.501.501 0 0 1 .573.819z"/>
                                    <path d="M6.971 26.966l2.868-2.008L15 32.331l-2.867 2.008zm-4.752-7.66l2.048-1.434l.573.82l-2.048 1.433zm1.147 1.638l2.048-1.434l.573.82l-2.048 1.434zm1.147 1.639l2.048-1.434l.574.82l-2.048 1.434zm1.147 1.639l2.048-1.434l.574.819l-2.048 1.434z" fill="#000000"/>
                                    <path fill="#292F33" d="M23.35 20.14s3.921 3.102 2.223 6.86c.001 0-4.541-2.318-2.223-6.86z"/>
                                    <path d="M25.967 25.593c.191-1.638-.552-3.065-1.296-4.05a8.75 8.75 0 0 0-1.667-.602c-.04.111-.061.215-.093.324c.139 2.639 1.694 3.814 3.056 4.328z" fill="#000000"/>
                                    <path fill="#292F33" d="M23 20s4.905.968 5.112 5.086c0 0-5.099.013-5.112-5.086zm9 16v-2c0-3.314-2.685-6-6-6H10a6 6 0 0 0-6 6v2h28z"/>
                                    <path fill="#292F33" d="M12.799 26.751h10.403V31H12.799z"/>
                                    <path fill="#292F33" d="M14 27h8s-1.018 7-4 7s-4-7-4-7"/>
                                    <path fill="#292F33" d="M13.64 30.038c1.744 1.268 2.848 1.963 4.36 1.963c1.512 0 2.615-.696 4.359-1.963v-5.749h-8.72v5.749z"/>
                                    <path d="M13.632 25.973c1.216 1.374 2.724 1.746 4.364 1.746c1.639 0 3.146-.373 4.363-1.746v-3.491h-8.728v3.491z" fill="#000000"/>
                                    <path fill="#292F33" d="M11.444 15.936c0 1.448-.734 2.622-1.639 2.622s-1.639-1.174-1.639-2.622s.734-2.623 1.639-2.623c.905-.001 1.639 1.174 1.639 2.623m16.389 0c0 1.448-.733 2.622-1.639 2.622c-.905 0-1.639-1.174-1.639-2.622s.733-2.623 1.639-2.623c.906-.001 1.639 1.174 1.639 2.623"/>
                                    <path fill="#292F33" d="M9.477 16.54C9.477 9 12 5 18 5s8.522 4 8.522 11.54c0 5.821-3.815 10.54-8.522 10.54c-4.707 0-8.523-4.719-8.523-10.54"/>
                                    <path fill="#66757F" d="M11 28c0 1 1 3 3 5c1.581 1.581 2.719 3 2.719 3c.797-.005 1.9-.004 2.73-.001c-.891-2.02-2.477-3.471-3.279-4.273C15.17 30.726 13 29 13 27c0-1-2 1-2 1"/>
                                    <path fill="#292F33" d="M16.719 36l2.724-.001c-.512-1.161-1.251-2.127-1.94-2.897a11.874 11.874 0 0 0-1.405 2.16c.388.449.621.738.621.738z"/>
                                    <path fill="#66757F" d="M25 28c0 1-1 3-3 5c-1.581 1.581-2.5 3-2.5 3c-.902-.004-1.418-.002-3 0c.891-2.02 2.528-3.472 3.33-4.274C20.83 30.726 23 29 23 27c0-1 2 1 2 1"/>
                                    <path fill="#F7DECE" d="M18 13.711c-2.995 0-8.116-2.044-7.064 1.98c.614 2.348 1.417 2.881 3.475 2.606c2.124-.283 1.991-1.016 3.495-1.016s1.56.733 3.684 1.016c2.058.274 2.861-.258 3.475-2.606c1.051-4.024-4.07-1.98-7.065-1.98z"/>
                                    <path fill="#662113" d="M14 17c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1m8 0c-.55 0-1-.45-1-1v-1c0-.55.45-1 1-1s1 .45 1 1v1c0 .55-.45 1-1 1"/>
                                </svg>`
                    };
                case 'wizard':
                    return {
                        header: '<span style="font-size: 20px;">🧙</span>',
                        settings: '<span style="font-size: 40px;">🧙</span>'
                    };
                default:
                    return {
                        header: '<span style="font-size: 20px;">👤</span>',
                        settings: '<span style="font-size: 40px;">👤</span>'
                    };
            }
        }

        // Update background based on theme or custom image
        function updateBackground() {
            const body = document.body;
            
            if (gameState.backgroundImage) {
                // Use custom uploaded image
                body.style.background = `url(${gameState.backgroundImage}) center/cover no-repeat`;
            } else {
                // Use theme-based gradients
                switch (gameState.backgroundTheme) {
                    case 'crypto':
                        body.style.background = 'linear-gradient(135deg, #f7931e 0%, #ac6c00 50%, #1a1a1a 100%)';
                        break;
                    case 'space':
                        body.style.background = 'linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 30%, #16213e  60%, #0f3460 100%)';
                        break;
                    case 'nature':
                        body.style.background = 'linear-gradient(135deg, #2d5016 0%, #3e7b27 30%, #4a7c59 60%, #6b9080 100%)';
                        break;
                    default:
                        body.style.background = 'linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #f7931e 100%), radial-gradient(circle at 20% 80%, rgba(247, 147, 30, 0.3) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(255, 215, 0, 0.2) 0%, transparent 50%)';
                }
            }
        }

        // Set background theme
        function setBackground(theme) {
            gameState.backgroundTheme = theme;
            gameState.backgroundImage = null; // Clear custom image when using theme
            updateBackground();
            saveGameState();
            showNotification(`🎨 Background changed to ${theme} theme!`);
        }

        // Upload custom background image
        function uploadBackgroundImage() {
            const file = document.getElementById('backgroundImageInput').files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    gameState.backgroundImage = e.target.result;
                    gameState.backgroundTheme = 'custom';
                    updateBackground();
                    saveGameState();
                    showNotification('🖼️ Custom background uploaded!');
                };
                reader.readAsDataURL(file);
            }
        }

        // Remove custom background
        function removeBackground() {
            gameState.backgroundImage = null;
            gameState.backgroundTheme = 'default';
            updateBackground();
            saveGameState();
            showNotification('🗑️ Background reset to default!');
        }

        // Modal functions
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Show notification
        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        // Update ad timer
        function updateAdTimer() {
            const now = Date.now();
            const timeLeft = Math.max(0, 300000 - (now - gameState.lastAdTime));
            
            if (timeLeft > 0) {
                const minutes = Math.floor(timeLeft / 60000);
                const seconds = Math.floor((timeLeft % 60000) / 1000);
                document.getElementById('adTimer').textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                document.getElementById('adBtn').disabled = true;
                document.getElementById('adBtn').innerHTML = '⏰ Wait for cooldown';
            } else {
                document.getElementById('adTimer').textContent = 'Ready';
                document.getElementById('adBtn').disabled = false;
                document.getElementById('adBtn').innerHTML = '▶️ Watch Ad';
            }
        }

        // Update Bitcoin dots based on rank progress
        function updateBitcoinDots() {
            const bitcoinDots = document.getElementById('bitcoinDots');
            const bitcoinTap = document.getElementById('bitcoinTap');
            
            // Clear existing dots
            bitcoinDots.innerHTML = '';
            
            // Calculate progress within current rank
            const currentRankCoins = rankThresholds[gameState.rank - 1] || 0;
            const nextRankCoins = rankThresholds[gameState.rank] || rankThresholds[rankThresholds.length - 1];
            const progress = (gameState.coins - currentRankCoins) / (nextRankCoins - currentRankCoins);
            
            // Create 10 dots around the circle
            const totalDots = 10;
            const activeDots = Math.floor(progress * totalDots);
            
            for (let i = 0; i < totalDots; i++) {
                const dot = document.createElement('div');
                dot.className = 'rank-dot';
                
                // Position dots around the circle
                const angle = (i / totalDots) * 2 * Math.PI - Math.PI / 2; // Start from top
                const radius = 85; // Distance from center
                const x = 50 + Math.cos(angle) * radius / 2; // Convert to percentage
                const y = 50 + Math.sin(angle) * radius / 2;
                
                dot.style.left = `${x}%`;
                dot.style.top = `${y}%`;
                dot.style.transform = 'translate(-50%, -50%)';
                
                if (i < activeDots) {
                    dot.classList.add('active');
                }
                
                bitcoinDots.appendChild(dot);
            }
            
            // Change Bitcoin background when all dots are active
            if (activeDots >= totalDots) {
                bitcoinTap.classList.add('rank-progress');
            } else {
                bitcoinTap.classList.remove('rank-progress');
            }
        }

        // PandaCode game functions
        function watchYouTubeVideo() {
            // In a real app, this would open the actual YouTube video
            // For demo purposes, we'll show a notification
            showNotification('🎥 Opening YouTube video... Look for the 6-digit code!');
            
            // Award panda coins and diamond for watching video
            gameState.videosWatched++;
            gameState.pandaCoins += 10; // 10 panda coins per video
            gameState.diamonds += 1; // 1 diamond per video
            gameState.pandaDiamonds += 1;
            
            showNotification('🐼 +10 Panda Coins & +1 Diamond for watching!');
            updateDisplay();
            saveGameState();
            
            // Simulate opening YouTube (in real app, use: window.open('https://youtube.com/watch?v=YOUR_VIDEO_ID'))
            setTimeout(() => {
                showNotification('💡 Hint: The code appears at 2:45 in the video!');
            }, 3000);
        }

        function submitCode() {
            const codeInput = document.getElementById('codeInput');
            const enteredCode = codeInput.value.trim();
            
            if (!enteredCode) {
                showNotification('❌ Please enter a code');
                return;
            }
            
            if (enteredCode.length !== 6) {
                showNotification('❌ Code must be 6 digits');
                return;
            }
            
            // Check cooldown (1 attempt per minute)
            const now = Date.now();
            if (now - gameState.lastCodeSubmission < 60000) {
                const timeLeft = 60000 - (now - gameState.lastCodeSubmission);
                const seconds = Math.ceil(timeLeft / 1000);
                showNotification(`⏰ Wait ${seconds} seconds before next attempt`);
                return;
            }
            
            gameState.codeAttempts++;
            gameState.lastCodeSubmission = now;
            
            // Demo code for testing (in real app, this would be the actual daily code)
            const correctCode = '123456';
            
            if (enteredCode === correctCode) {
                gameState.codesFound++;
                gameState.pandaDiamonds += 50;
                gameState.diamonds += 50;
                showNotification('🎉 Correct code! +50 Diamonds earned!');
                codeInput.value = '';
            } else {
                showNotification('❌ Wrong code! Try again tomorrow or rewatch the video.');
            }
            
            updateDisplay();
            saveGameState();
        }

        // Dropdown menu functions
        function toggleDropdown() {
            const dropdown = document.getElementById('dropdownMenu');
            dropdown.classList.toggle('active');
        }

        function showDropdownScreen(screenId) {
            showScreen(screenId);
            toggleDropdown();
            
            // Update specific screen data when opened
            if (screenId === 'rankScreen') {
                updateRankDetails();
            } else if (screenId === 'chartScreen') {
                initializeCryptoCharts();
            } else if (screenId === 'pandaTradeScreen') {
                initializePandaTrading();
            }
        }

        // Update rank details screen
        function updateRankDetails() {
            document.getElementById('rankNumber').textContent = gameState.rank;
            document.getElementById('coinsPerTapDisplay').textContent = gameState.rank;
            document.getElementById('currentBenefit').textContent = `${gameState.rank} coin${gameState.rank > 1 ? 's' : ''}`;
            document.getElementById('nextBenefit').textContent = `${gameState.rank + 1} coins`;
            
            // Update progress bar
            const currentRankCoins = rankThresholds[gameState.rank - 1] || 0;
            const nextRankCoins = rankThresholds[gameState.rank] || rankThresholds[rankThresholds.length - 1];
            const progress = ((gameState.coins - currentRankCoins) / (nextRankCoins - currentRankCoins)) * 100;
            
            document.getElementById('currentCoinsDetail').textContent = gameState.coins;
            document.getElementById('nextRankCoinsDetail').textContent = nextRankCoins;
            document.getElementById('rankProgressDetail').style.width = `${Math.max(0, Math.min(100, progress))}%`;
            
            // Update global leaderboard
            updateGlobalLeaderboard();
        }

        // Update global leaderboard display
        function updateGlobalLeaderboard() {
            const leaderboardList = document.getElementById('leaderboardList');
            const globalPosition = document.getElementById('globalPosition');
            
            // Calculate player's global position based on coins
            // Simulate dynamic positioning - higher coins = better position
            const basePosition = 1247;
            const coinsBonus = Math.floor(gameState.coins / 1000); // Every 1000 coins improves position by 1
            gameState.globalPosition = Math.max(1, basePosition - coinsBonus);
            
            globalPosition.textContent = `#${gameState.globalPosition.toLocaleString()}`;
            
            // Generate leaderboard HTML
            let leaderboardHTML = '';
            
            globalLeaderboard.forEach(player => {
                const topClass = player.rank <= 3 ? `top-${player.rank}` : '';
                const rankEmoji = player.rank === 1 ? '🥇' : player.rank === 2 ? '🥈' : player.rank === 3 ? '🥉' : `#${player.rank}`;
                
                leaderboardHTML += `
                    <div class="leaderboard-item ${topClass}">
                        <div class="leaderboard-rank">${rankEmoji}</div>
                        <div class="leaderboard-player">
                            <div class="leaderboard-avatar">${player.avatar}</div>
                            <div class="leaderboard-name">${player.name}</div>
                        </div>
                        <div class="leaderboard-coins">${player.coins.toLocaleString()}</div>
                    </div>
                `;
            });
            
            leaderboardList.innerHTML = leaderboardHTML;
            
            // Update timestamp
            const now = new Date();
            document.getElementById('leaderboardUpdate').textContent = now.toLocaleTimeString();
        }

        // Simulate leaderboard changes (players gaining coins)
        function simulateLeaderboardChanges() {
            globalLeaderboard.forEach(player => {
                // Random coin gains for top players (1-100 coins per update)
                const coinGain = Math.floor(Math.random() * 100) + 1;
                player.coins += coinGain;
            });
            
            // Re-sort leaderboard by coins (descending)
            globalLeaderboard.sort((a, b) => b.coins - a.coins);
            
            // Update ranks
            globalLeaderboard.forEach((player, index) => {
                player.rank = index + 1;
            });
        }

        // Live Crypto Chart System with Binance API Integration
        let currentSymbol = 'BTCUSDT';
        let currentTimeframe = '15m';
        let priceChart = null;
        let chartData = [];
        let priceWebSocket = null;
        let livePrices = {};

        // Panda Trading System
        let candlestickTimeframe = '5m';
        let candlestickData = [];
        let lastPrice = 0;
        let priceDirection = 'neutral';

        // Initialize chart canvas
        function initializeChart() {
            const canvas = document.getElementById('priceChart');
            const ctx = canvas.getContext('2d');
            
            // Set canvas size for high DPI displays
            const rect = canvas.getBoundingClientRect();
            const dpr = window.devicePixelRatio || 1;
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            ctx.scale(dpr, dpr);
            
            return ctx;
        }

        // Fetch live prices from Binance API
        async function fetchLivePrices() {
            try {
                const symbols = ['BTCUSDT', 'ETHUSDT', 'DOGEUSDT', 'ADAUSDT', 'SOLUSDT', 'MATICUSDT'];
                const response = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbols=${JSON.stringify(symbols)}`);
                const data = await response.json();
                
                data.forEach(ticker => {
                    const symbol = ticker.symbol;
                    livePrices[symbol] = {
                        price: parseFloat(ticker.lastPrice),
                        change: parseFloat(ticker.priceChangePercent),
                        volume: parseFloat(ticker.volume),
                        high: parseFloat(ticker.highPrice),
                        low: parseFloat(ticker.lowPrice)
                    };
                });
                
                updatePriceDisplay();
                return true;
            } catch (error) {
                console.log('Using fallback price data');
                // Fallback to simulated data if API fails
                useFallbackPrices();
                return false;
            }
        }

        // Fallback prices if API is unavailable
        function useFallbackPrices() {
            const fallbackPrices = {
                'BTCUSDT': { price: 43250, change: 2.45, volume: 25847, high: 44100, low: 42800 },
                'ETHUSDT': { price: 2580, change: 1.87, volume: 185632, high: 2620, low: 2540 },
                'DOGEUSDT': { price: 0.085, change: -0.95, volume: 2847593, high: 0.087, low: 0.083 },
                'ADAUSDT': { price: 0.52, change: 3.21, volume: 98765, high: 0.54, low: 0.50 },
                'SOLUSDT': { price: 98.40, change: 4.67, volume: 45632, high: 102.50, low: 95.20 },
                'MATICUSDT': { price: 0.89, change: -1.23, volume: 156789, high: 0.92, low: 0.87 }
            };
            
            Object.keys(fallbackPrices).forEach(symbol => {
                // Add small random fluctuations
                const basePrice = fallbackPrices[symbol];
                const fluctuation = (Math.random() - 0.5) * 0.02; // ±1%
                livePrices[symbol] = {
                    price: basePrice.price * (1 + fluctuation),
                    change: basePrice.change + (Math.random() - 0.5) * 0.5,
                    volume: basePrice.volume * (1 + (Math.random() - 0.5) * 0.1),
                    high: basePrice.high,
                    low: basePrice.low
                };
            });
            
            updatePriceDisplay();
        }

        // Fetch historical kline data for charts
        async function fetchKlineData(symbol, interval, limit = 100) {
            try {
                const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=${symbol}&interval=${interval}&limit=${limit}`);
                const data = await response.json();
                
                return data.map(kline => ({
                    time: kline[0],
                    open: parseFloat(kline[1]),
                    high: parseFloat(kline[2]),
                    low: parseFloat(kline[3]),
                    close: parseFloat(kline[4]),
                    volume: parseFloat(kline[5])
                }));
            } catch (error) {
                console.log('Using fallback chart data');
                return generateFallbackChartData();
            }
        }

        // Generate fallback chart data
        function generateFallbackChartData() {
            const data = [];
            const basePrice = livePrices[currentSymbol]?.price || 50000;
            const now = Date.now();
            
            for (let i = 99; i >= 0; i--) {
                const time = now - (i * 15 * 60 * 1000); // 15 minutes intervals
                const randomChange = (Math.random() - 0.5) * 0.02;
                const price = basePrice * (1 + randomChange * (i / 100));
                
                data.push({
                    time: time,
                    open: price * 0.999,
                    high: price * 1.002,
                    low: price * 0.998,
                    close: price,
                    volume: Math.random() * 1000
                });
            }
            
            return data;
        }

        // Draw the price chart
        function drawChart(data) {
            const canvas = document.getElementById('priceChart');
            const ctx = initializeChart();
            const rect = canvas.getBoundingClientRect();
            const width = rect.width;
            const height = rect.height;
            
            // Clear canvas
            ctx.clearRect(0, 0, width, height);
            
            if (!data || data.length === 0) return;
            
            // Find price range
            const prices = data.map(d => d.close);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            const priceRange = maxPrice - minPrice;
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 1;
            
            // Horizontal grid lines
            for (let i = 0; i <= 4; i++) {
                const y = (height / 4) * i;
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(width, y);
                ctx.stroke();
            }
            
            // Vertical grid lines
            for (let i = 0; i <= 6; i++) {
                const x = (width / 6) * i;
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, height);
                ctx.stroke();
            }
            
            // Draw price line
            ctx.strokeStyle = '#ffd700';
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            data.forEach((point, index) => {
                const x = (index / (data.length - 1)) * width;
                const y = height - ((point.close - minPrice) / priceRange) * height;
                
                if (index === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            
            ctx.stroke();
            
            // Draw gradient fill
            const gradient = ctx.createLinearGradient(0, 0, 0, height);
            gradient.addColorStop(0, 'rgba(255, 215, 0, 0.3)');
            gradient.addColorStop(1, 'rgba(255, 215, 0, 0.05)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.moveTo(0, height);
            
            data.forEach((point, index) => {
                const x = (index / (data.length - 1)) * width;
                const y = height - ((point.close - minPrice) / priceRange) * height;
                ctx.lineTo(x, y);
            });
            
            ctx.lineTo(width, height);
            ctx.closePath();
            ctx.fill();
            
            // Draw price labels
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.font = '10px Arial';
            ctx.textAlign = 'right';
            
            for (let i = 0; i <= 4; i++) {
                const price = minPrice + (priceRange * (4 - i) / 4);
                const y = (height / 4) * i + 3;
                ctx.fillText(formatPrice(price), width - 5, y);
            }
        }

        // Format price for display
        function formatPrice(price) {
            if (price < 1) {
                return price.toFixed(4);
            } else if (price < 100) {
                return price.toFixed(2);
            } else {
                return Math.round(price).toLocaleString();
            }
        }

        // Update price display
        function updatePriceDisplay() {
            const cryptoMap = {
                'BTCUSDT': { id: 'btc', name: 'Bitcoin' },
                'ETHUSDT': { id: 'eth', name: 'Ethereum' },
                'DOGEUSDT': { id: 'doge', name: 'Dogecoin' },
                'ADAUSDT': { id: 'ada', name: 'Cardano' },
                'SOLUSDT': { id: 'sol', name: 'Solana' },
                'MATICUSDT': { id: 'matic', name: 'Polygon' }
            };
            
            Object.keys(cryptoMap).forEach(symbol => {
                const crypto = cryptoMap[symbol];
                const data = livePrices[symbol];
                
                if (data) {
                    // Update price
                    const priceElement = document.getElementById(`${crypto.id}Price`);
                    if (priceElement) {
                        priceElement.textContent = `$${formatPrice(data.price)}`;
                    }
                    
                    // Update 24h change
                    const changeElement = document.getElementById(`${crypto.id}24h`);
                    if (changeElement) {
                        const changeText = `${data.change >= 0 ? '+' : ''}${data.change.toFixed(2)}%`;
                        changeElement.textContent = changeText;
                        changeElement.className = `price-24h ${data.change >= 0 ? 'positive' : 'negative'}`;
                    }
                    
                    // Update volume
                    const volumeElement = document.getElementById(`${crypto.id}Volume`);
                    if (volumeElement) {
                        volumeElement.textContent = formatVolume(data.volume);
                    }
                    
                    // Update current chart if this is the selected symbol
                    if (symbol === currentSymbol) {
                        document.getElementById('currentPrice').textContent = `$${formatPrice(data.price)}`;
                        const priceChangeElement = document.getElementById('priceChange');
                        const changeText = `${data.change >= 0 ? '+' : ''}${data.change.toFixed(2)}%`;
                        priceChangeElement.textContent = changeText;
                        priceChangeElement.className = `price-change ${data.change >= 0 ? 'positive' : 'negative'}`;
                    }
                }
            });
            
            // Update timestamp
            const now = new Date();
            document.getElementById('lastUpdated').textContent = now.toLocaleTimeString();
        }

        // Format volume for display
        function formatVolume(volume) {
            if (volume >= 1000000) {
                return (volume / 1000000).toFixed(1) + 'M';
            } else if (volume >= 1000) {
                return (volume / 1000).toFixed(1) + 'K';
            } else {
                return volume.toFixed(0);
            }
        }

        // Select cryptocurrency for detailed chart
        async function selectCrypto(symbol, name) {
            // Update active tab
            document.querySelectorAll('.chart-tab').forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update current selection
            currentSymbol = symbol;
            document.getElementById('selectedCryptoName').textContent = name;
            document.getElementById('selectedSymbol').textContent = symbol;
            
            // Show loading
            document.getElementById('chartLoading').classList.remove('hidden');
            
            // Update price info
            if (livePrices[symbol]) {
                const data = livePrices[symbol];
                document.getElementById('currentPrice').textContent = `$${formatPrice(data.price)}`;
                const priceChangeElement = document.getElementById('priceChange');
                const changeText = `${data.change >= 0 ? '+' : ''}${data.change.toFixed(2)}%`;
                priceChangeElement.textContent = changeText;
                priceChangeElement.className = `price-change ${data.change >= 0 ? 'positive' : 'negative'}`;
            }
            
            // Fetch and draw chart data
            const klineData = await fetchKlineData(symbol, currentTimeframe);
            chartData = klineData;
            drawChart(chartData);
            
            // Hide loading
            document.getElementById('chartLoading').classList.add('hidden');
        }

        // Change timeframe
        async function changeTimeframe(timeframe) {
            // Update active timeframe button
            document.querySelectorAll('.timeframe-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            currentTimeframe = timeframe;
            
            // Show loading
            document.getElementById('chartLoading').classList.remove('hidden');
            
            // Fetch new data
            const klineData = await fetchKlineData(currentSymbol, timeframe);
            chartData = klineData;
            drawChart(chartData);
            
            // Hide loading
            document.getElementById('chartLoading').classList.add('hidden');
        }

        // Initialize crypto charts when screen is opened
        async function initializeCryptoCharts() {
            // Fetch initial live prices
            await fetchLivePrices();
            
            // Initialize the default chart (Bitcoin)
            await selectCrypto('BTCUSDT', 'Bitcoin');
        }

        // Open news article (demo function)
        function openNewsArticle(articleId) {
            showNotification('📰 Opening full article... (Demo feature)');
        }

        // Panda Trading Functions
        
        // Initialize candlestick chart
        function initializeCandlestickChart() {
            const canvas = document.getElementById('candlestickChart');
            const ctx = canvas.getContext('2d');
            
            // Set canvas size for high DPI displays
            const rect = canvas.getBoundingClientRect();
            const dpr = window.devicePixelRatio || 1;
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            ctx.scale(dpr, dpr);
            
            return ctx;
        }

        // Fetch candlestick data for trading
        async function fetchCandlestickData(interval = '5m', limit = 50) {
            try {
                const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=${interval}&limit=${limit}`);
                const data = await response.json();
                
                return data.map(kline => ({
                    time: kline[0],
                    open: parseFloat(kline[1]),
                    high: parseFloat(kline[2]),
                    low: parseFloat(kline[3]),
                    close: parseFloat(kline[4]),
                    volume: parseFloat(kline[5])
                }));
            } catch (error) {
                console.log('Using fallback candlestick data');
                return generateFallbackCandlestickData(limit);
            }
        }

        // Generate fallback candlestick data
        function generateFallbackCandlestickData(limit = 50) {
            const data = [];
            let basePrice = 43250;
            const now = Date.now();
            
            for (let i = limit - 1; i >= 0; i--) {
                const time = now - (i * 5 * 60 * 1000); // 5 minutes intervals
                const volatility = 0.002; // 0.2% volatility
                
                const open = basePrice;
                const change = (Math.random() - 0.5) * volatility * 2;
                const close = open * (1 + change);
                const high = Math.max(open, close) * (1 + Math.random() * volatility);
                const low = Math.min(open, close) * (1 - Math.random() * volatility);
                
                data.push({
                    time: time,
                    open: open,
                    high: high,
                    low: low,
                    close: close,
                    volume: Math.random() * 1000 + 500
                });
                
                basePrice = close;
            }
            
            return data;
        }

        // Draw dot line chart
        function drawCandlestickChart(data) {
            const canvas = document.getElementById('candlestickChart');
            const ctx = initializeCandlestickChart();
            const rect = canvas.getBoundingClientRect();
            const width = rect.width;
            const height = rect.height;
            
            // Clear canvas
            ctx.clearRect(0, 0, width, height);
            
            if (!data || data.length === 0) return;
            
            // Find price range using close prices
            const prices = data.map(d => d.close);
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);
            const priceRange = maxPrice - minPrice;
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 1;
            
            // Horizontal grid lines
            for (let i = 0; i <= 5; i++) {
                const y = (height / 5) * i;
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(width, y);
                ctx.stroke();
            }
            
            // Vertical grid lines
            for (let i = 0; i <= 6; i++) {
                const x = (width / 6) * i;
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, height);
                ctx.stroke();
            }
            
            // Draw connecting lines between dots
            ctx.strokeStyle = '#ffd700';
            ctx.lineWidth = 2;
            ctx.beginPath();
            
            data.forEach((point, index) => {
                const x = (index / (data.length - 1)) * width;
                const y = height - ((point.close - minPrice) / priceRange) * height;
                
                if (index === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            });
            
            ctx.stroke();
            
            // Draw dots at each price point
            data.forEach((point, index) => {
                const x = (index / (data.length - 1)) * width;
                const y = height - ((point.close - minPrice) / priceRange) * height;
                
                // Determine dot color based on price movement
                let dotColor = '#ffd700'; // Default gold
                if (index > 0) {
                    const prevPrice = data[index - 1].close;
                    if (point.close > prevPrice) {
                        dotColor = '#4CAF50'; // Green for up
                    } else if (point.close < prevPrice) {
                        dotColor = '#f44336'; // Red for down
                    }
                }
                
                // Draw dot
                ctx.fillStyle = dotColor;
                ctx.beginPath();
                ctx.arc(x, y, 4, 0, 2 * Math.PI);
                ctx.fill();
                
                // Add white border to dots
                ctx.strokeStyle = 'white';
                ctx.lineWidth = 1;
                ctx.stroke();
            });
            
            // Draw gradient fill under the line
            const gradient = ctx.createLinearGradient(0, 0, 0, height);
            gradient.addColorStop(0, 'rgba(255, 215, 0, 0.2)');
            gradient.addColorStop(1, 'rgba(255, 215, 0, 0.05)');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.moveTo(0, height);
            
            data.forEach((point, index) => {
                const x = (index / (data.length - 1)) * width;
                const y = height - ((point.close - minPrice) / priceRange) * height;
                ctx.lineTo(x, y);
            });
            
            ctx.lineTo(width, height);
            ctx.closePath();
            ctx.fill();
            
            // Draw price labels
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.font = '10px Arial';
            ctx.textAlign = 'right';
            
            for (let i = 0; i <= 5; i++) {
                const price = minPrice + (priceRange * (5 - i) / 5);
                const y = (height / 5) * i + 3;
                ctx.fillText(formatPrice(price), width - 5, y);
            }
            
            // Update panda based on latest price movement
            updatePandaMovement(data);
        }

        // Update panda movement based on price action
        function updatePandaMovement(data) {
            if (data.length < 2) return;
            
            const latest = data[data.length - 1];
            const previous = data[data.length - 2];
            
            const pandaAvatar = document.getElementById('tradingPanda');
            const pandaStatus = document.getElementById('pandaStatus');
            
            // Update trading price display
            document.getElementById('tradingPrice').textContent = `$${formatPrice(latest.close)}`;
            
            // Calculate price change
            const priceChange = ((latest.close - previous.close) / previous.close) * 100;
            const changeElement = document.getElementById('tradingChange');
            
            if (priceChange > 0) {
                changeElement.textContent = `+${priceChange.toFixed(2)}%`;
                changeElement.className = 'price-change positive';
                
                // Panda goes up (bullish)
                pandaAvatar.className = 'panda-avatar bullish';
                pandaStatus.textContent = 'Bullish! 📈';
                pandaStatus.className = 'panda-status bullish';
                priceDirection = 'up';
            } else if (priceChange < 0) {
                changeElement.textContent = `${priceChange.toFixed(2)}%`;
                changeElement.className = 'price-change negative';
                
                // Panda goes down (bearish)
                pandaAvatar.className = 'panda-avatar bearish';
                pandaStatus.textContent = 'Bearish! 📉';
                pandaStatus.className = 'panda-status bearish';
                priceDirection = 'down';
            } else {
                changeElement.textContent = '0.00%';
                changeElement.className = 'price-change';
                
                // Panda neutral
                pandaAvatar.className = 'panda-avatar';
                pandaStatus.textContent = 'Watching...';
                pandaStatus.className = 'panda-status';
                priceDirection = 'neutral';
            }
            
            lastPrice = latest.close;
        }

        // Change candlestick timeframe
        async function changeCandlestickTimeframe(timeframe) {
            // Update active timeframe button
            document.querySelectorAll('.timeframe-controls .timeframe-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            candlestickTimeframe = timeframe;
            
            // Show loading
            document.getElementById('candlestickLoading').classList.remove('hidden');
            
            // Fetch new data
            const data = await fetchCandlestickData(timeframe);
            candlestickData = data;
            drawCandlestickChart(candlestickData);
            
            // Hide loading
            document.getElementById('candlestickLoading').classList.add('hidden');
        }

        // Trade avatar skin
        function tradeSkin(skinType, pandaCost, diamondCost) {
            // Check if already owned
            if (gameState.ownedSkins.includes(skinType)) {
                showNotification('✅ You already own this skin!');
                return;
            }
            
            // Check if player has enough resources
            if (gameState.pandaCoins < pandaCost || gameState.diamonds < diamondCost) {
                showNotification(`❌ Not enough resources! Need ${pandaCost} 🐼 + ${diamondCost} 💎`);
                return;
            }
            
            // Process trade
            gameState.pandaCoins -= pandaCost;
            gameState.diamonds -= diamondCost;
            gameState.ownedSkins.push(skinType);
            gameState.totalTrades++;
            gameState.successfulTrades++;
            gameState.tradingProfit += pandaCost; // Track profit in panda coins
            
            // Update skin selection in settings
            gameState.avatarSkin = skinType;
            
            showNotification(`🎉 Successfully traded for ${skinType} skin!`);
            updateTradingDisplay();
            updateDisplay();
            saveGameState();
        }

        // Update trading display
        function updateTradingDisplay() {
            // Update balance display
            document.getElementById('tradingPandaCoins').textContent = gameState.pandaCoins;
            document.getElementById('tradingDiamonds').textContent = gameState.diamonds;
            
            // Update trading stats
            document.getElementById('totalTrades').textContent = gameState.totalTrades;
            document.getElementById('successfulTrades').textContent = gameState.successfulTrades;
            document.getElementById('skinsOwned').textContent = gameState.ownedSkins.length;
            document.getElementById('tradingProfit').textContent = gameState.tradingProfit;
            
            // Update skin cards to show owned status
            document.querySelectorAll('.trading-skin-card').forEach(card => {
                const skinType = card.dataset.skin;
                const tradeBtn = card.querySelector('.trade-btn');
                
                if (gameState.ownedSkins.includes(skinType)) {
                    card.classList.add('owned');
                    tradeBtn.textContent = 'Owned ✓';
                    tradeBtn.classList.add('owned');
                    tradeBtn.disabled = true;
                } else {
                    card.classList.remove('owned');
                    tradeBtn.textContent = 'Trade';
                    tradeBtn.classList.remove('owned');
                    tradeBtn.disabled = false;
                }
            });
        }

        // Initialize Panda Trade screen
        async function initializePandaTrading() {
            // Update trading display
            updateTradingDisplay();
            
            // Fetch and display candlestick chart
            document.getElementById('candlestickLoading').classList.remove('hidden');
            const data = await fetchCandlestickData(candlestickTimeframe);
            candlestickData = data;
            drawCandlestickChart(candlestickData);
            document.getElementById('candlestickLoading').classList.add('hidden');
        }

        // Update candlestick data periodically
        async function updateCandlestickData() {
            if (document.getElementById('pandaTradeScreen').classList.contains('active')) {
                const data = await fetchCandlestickData(candlestickTimeframe);
                candlestickData = data;
                drawCandlestickChart(candlestickData);
            }
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const dropdown = document.getElementById('dropdownMenu');
            const menuDots = document.querySelector('.menu-dots');
            
            if (!dropdown.contains(event.target) && !menuDots.contains(event.target)) {
                dropdown.classList.remove('active');
            }
        });

        // Initialize game
        loadGameState();
        
        // Start game loops
        setInterval(updateEnergyRefill, 1000);
        setInterval(updateAdTimer, 1000);
        setInterval(fetchLivePrices, 10000); // Update live prices every 10 seconds
        setInterval(updateCandlestickData, 15000); // Update candlestick data every 15 seconds
        setInterval(saveGameState, 10000); // Auto-save every 10 seconds
        setInterval(simulateLeaderboardChanges, 30000); // Update leaderboard every 30 seconds

        // Close modals when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9766d30397c59098',t:'MTc1NjQxNTcyOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
